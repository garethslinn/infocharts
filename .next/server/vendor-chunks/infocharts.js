"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/infocharts";
exports.ids = ["vendor-chunks/infocharts"];
exports.modules = {

/***/ "(rsc)/./node_modules/infocharts/dist/styles/infocharts.css":
/*!************************************************************!*\
  !*** ./node_modules/infocharts/dist/styles/infocharts.css ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"f015de97cb3c\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5mb2NoYXJ0cy9kaXN0L3N0eWxlcy9pbmZvY2hhcnRzLmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLEtBQVUsRUFBRSxFQUF1QiIsInNvdXJjZXMiOlsid2VicGFjazovL2luZm90ZXN0Ly4vbm9kZV9tb2R1bGVzL2luZm9jaGFydHMvZGlzdC9zdHlsZXMvaW5mb2NoYXJ0cy5jc3M/ZjM4MiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcImYwMTVkZTk3Y2IzY1wiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/infocharts/dist/styles/infocharts.css\n");

/***/ }),

/***/ "(rsc)/./node_modules/infocharts/dist/index.es.js":
/*!**************************************************!*\
  !*** ./node_modules/infocharts/dist/index.es.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BenchmarkChart: () => (/* binding */ yn),\n/* harmony export */   ComparisonGraph: () => (/* binding */ sn),\n/* harmony export */   DoughnutChart: () => (/* binding */ an),\n/* harmony export */   DumbbellChart: () => (/* binding */ on),\n/* harmony export */   HeatMap: () => (/* binding */ pn),\n/* harmony export */   HorizontalBar: () => (/* binding */ ln),\n/* harmony export */   HorizontalList: () => (/* binding */ cn),\n/* harmony export */   RiskRating: () => (/* binding */ dn),\n/* harmony export */   SparkBar: () => (/* binding */ gn),\n/* harmony export */   SparkHorizontalBar: () => (/* binding */ bn),\n/* harmony export */   SparkLine: () => (/* binding */ xn),\n/* harmony export */   SparkStackedBar: () => (/* binding */ _n),\n/* harmony export */   SplineAreaChart: () => (/* binding */ fn),\n/* harmony export */   StackedAreaChart: () => (/* binding */ un),\n/* harmony export */   StackedBarChart: () => (/* binding */ hn),\n/* harmony export */   StackedRow: () => (/* binding */ vn),\n/* harmony export */   WaffleChart: () => (/* binding */ mn)\n/* harmony export */ });\nfunction qt(s) {\n  return s && s.__esModule && Object.prototype.hasOwnProperty.call(s, \"default\") ? s.default : s;\n}\nvar Ur = { exports: {} }, Xe = {}, br = { exports: {} }, A = {};\n/**\n * @license React\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar mt;\nfunction Kt() {\n  if (mt) return A;\n  mt = 1;\n  var s = Symbol.for(\"react.element\"), c = Symbol.for(\"react.portal\"), i = Symbol.for(\"react.fragment\"), f = Symbol.for(\"react.strict_mode\"), R = Symbol.for(\"react.profiler\"), j = Symbol.for(\"react.provider\"), b = Symbol.for(\"react.context\"), x = Symbol.for(\"react.forward_ref\"), h = Symbol.for(\"react.suspense\"), y = Symbol.for(\"react.memo\"), m = Symbol.for(\"react.lazy\"), E = Symbol.iterator;\n  function N(a) {\n    return a === null || typeof a != \"object\" ? null : (a = E && a[E] || a[\"@@iterator\"], typeof a == \"function\" ? a : null);\n  }\n  var L = { isMounted: function() {\n    return !1;\n  }, enqueueForceUpdate: function() {\n  }, enqueueReplaceState: function() {\n  }, enqueueSetState: function() {\n  } }, B = Object.assign, S = {};\n  function P(a, d, D) {\n    this.props = a, this.context = d, this.refs = S, this.updater = D || L;\n  }\n  P.prototype.isReactComponent = {}, P.prototype.setState = function(a, d) {\n    if (typeof a != \"object\" && typeof a != \"function\" && a != null) throw Error(\"setState(...): takes an object of state variables to update or a function which returns an object of state variables.\");\n    this.updater.enqueueSetState(this, a, d, \"setState\");\n  }, P.prototype.forceUpdate = function(a) {\n    this.updater.enqueueForceUpdate(this, a, \"forceUpdate\");\n  };\n  function O() {\n  }\n  O.prototype = P.prototype;\n  function g(a, d, D) {\n    this.props = a, this.context = d, this.refs = S, this.updater = D || L;\n  }\n  var X = g.prototype = new O();\n  X.constructor = g, B(X, P.prototype), X.isPureReactComponent = !0;\n  var K = Array.isArray, J = Object.prototype.hasOwnProperty, ne = { current: null }, fe = { key: !0, ref: !0, __self: !0, __source: !0 };\n  function ve(a, d, D) {\n    var I, W = {}, G = null, H = null;\n    if (d != null) for (I in d.ref !== void 0 && (H = d.ref), d.key !== void 0 && (G = \"\" + d.key), d) J.call(d, I) && !fe.hasOwnProperty(I) && (W[I] = d[I]);\n    var z = arguments.length - 2;\n    if (z === 1) W.children = D;\n    else if (1 < z) {\n      for (var Y = Array(z), ae = 0; ae < z; ae++) Y[ae] = arguments[ae + 2];\n      W.children = Y;\n    }\n    if (a && a.defaultProps) for (I in z = a.defaultProps, z) W[I] === void 0 && (W[I] = z[I]);\n    return { $$typeof: s, type: a, key: G, ref: H, props: W, _owner: ne.current };\n  }\n  function ge(a, d) {\n    return { $$typeof: s, type: a.type, key: d, ref: a.ref, props: a.props, _owner: a._owner };\n  }\n  function Ce(a) {\n    return typeof a == \"object\" && a !== null && a.$$typeof === s;\n  }\n  function Be(a) {\n    var d = { \"=\": \"=0\", \":\": \"=2\" };\n    return \"$\" + a.replace(/[=:]/g, function(D) {\n      return d[D];\n    });\n  }\n  var Se = /\\/+/g;\n  function ce(a, d) {\n    return typeof a == \"object\" && a !== null && a.key != null ? Be(\"\" + a.key) : d.toString(36);\n  }\n  function de(a, d, D, I, W) {\n    var G = typeof a;\n    (G === \"undefined\" || G === \"boolean\") && (a = null);\n    var H = !1;\n    if (a === null) H = !0;\n    else switch (G) {\n      case \"string\":\n      case \"number\":\n        H = !0;\n        break;\n      case \"object\":\n        switch (a.$$typeof) {\n          case s:\n          case c:\n            H = !0;\n        }\n    }\n    if (H) return H = a, W = W(H), a = I === \"\" ? \".\" + ce(H, 0) : I, K(W) ? (D = \"\", a != null && (D = a.replace(Se, \"$&/\") + \"/\"), de(W, d, D, \"\", function(ae) {\n      return ae;\n    })) : W != null && (Ce(W) && (W = ge(W, D + (!W.key || H && H.key === W.key ? \"\" : (\"\" + W.key).replace(Se, \"$&/\") + \"/\") + a)), d.push(W)), 1;\n    if (H = 0, I = I === \"\" ? \".\" : I + \":\", K(a)) for (var z = 0; z < a.length; z++) {\n      G = a[z];\n      var Y = I + ce(G, z);\n      H += de(G, d, D, Y, W);\n    }\n    else if (Y = N(a), typeof Y == \"function\") for (a = Y.call(a), z = 0; !(G = a.next()).done; ) G = G.value, Y = I + ce(G, z++), H += de(G, d, D, Y, W);\n    else if (G === \"object\") throw d = String(a), Error(\"Objects are not valid as a React child (found: \" + (d === \"[object Object]\" ? \"object with keys {\" + Object.keys(a).join(\", \") + \"}\" : d) + \"). If you meant to render a collection of children, use an array instead.\");\n    return H;\n  }\n  function se(a, d, D) {\n    if (a == null) return a;\n    var I = [], W = 0;\n    return de(a, I, \"\", \"\", function(G) {\n      return d.call(D, G, W++);\n    }), I;\n  }\n  function he(a) {\n    if (a._status === -1) {\n      var d = a._result;\n      d = d(), d.then(function(D) {\n        (a._status === 0 || a._status === -1) && (a._status = 1, a._result = D);\n      }, function(D) {\n        (a._status === 0 || a._status === -1) && (a._status = 2, a._result = D);\n      }), a._status === -1 && (a._status = 0, a._result = d);\n    }\n    if (a._status === 1) return a._result.default;\n    throw a._result;\n  }\n  var k = { current: null }, ye = { transition: null }, Oe = { ReactCurrentDispatcher: k, ReactCurrentBatchConfig: ye, ReactCurrentOwner: ne };\n  function be() {\n    throw Error(\"act(...) is not supported in production builds of React.\");\n  }\n  return A.Children = { map: se, forEach: function(a, d, D) {\n    se(a, function() {\n      d.apply(this, arguments);\n    }, D);\n  }, count: function(a) {\n    var d = 0;\n    return se(a, function() {\n      d++;\n    }), d;\n  }, toArray: function(a) {\n    return se(a, function(d) {\n      return d;\n    }) || [];\n  }, only: function(a) {\n    if (!Ce(a)) throw Error(\"React.Children.only expected to receive a single React element child.\");\n    return a;\n  } }, A.Component = P, A.Fragment = i, A.Profiler = R, A.PureComponent = g, A.StrictMode = f, A.Suspense = h, A.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Oe, A.act = be, A.cloneElement = function(a, d, D) {\n    if (a == null) throw Error(\"React.cloneElement(...): The argument must be a React element, but you passed \" + a + \".\");\n    var I = B({}, a.props), W = a.key, G = a.ref, H = a._owner;\n    if (d != null) {\n      if (d.ref !== void 0 && (G = d.ref, H = ne.current), d.key !== void 0 && (W = \"\" + d.key), a.type && a.type.defaultProps) var z = a.type.defaultProps;\n      for (Y in d) J.call(d, Y) && !fe.hasOwnProperty(Y) && (I[Y] = d[Y] === void 0 && z !== void 0 ? z[Y] : d[Y]);\n    }\n    var Y = arguments.length - 2;\n    if (Y === 1) I.children = D;\n    else if (1 < Y) {\n      z = Array(Y);\n      for (var ae = 0; ae < Y; ae++) z[ae] = arguments[ae + 2];\n      I.children = z;\n    }\n    return { $$typeof: s, type: a.type, key: W, ref: G, props: I, _owner: H };\n  }, A.createContext = function(a) {\n    return a = { $$typeof: b, _currentValue: a, _currentValue2: a, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null }, a.Provider = { $$typeof: j, _context: a }, a.Consumer = a;\n  }, A.createElement = ve, A.createFactory = function(a) {\n    var d = ve.bind(null, a);\n    return d.type = a, d;\n  }, A.createRef = function() {\n    return { current: null };\n  }, A.forwardRef = function(a) {\n    return { $$typeof: x, render: a };\n  }, A.isValidElement = Ce, A.lazy = function(a) {\n    return { $$typeof: m, _payload: { _status: -1, _result: a }, _init: he };\n  }, A.memo = function(a, d) {\n    return { $$typeof: y, type: a, compare: d === void 0 ? null : d };\n  }, A.startTransition = function(a) {\n    var d = ye.transition;\n    ye.transition = {};\n    try {\n      a();\n    } finally {\n      ye.transition = d;\n    }\n  }, A.unstable_act = be, A.useCallback = function(a, d) {\n    return k.current.useCallback(a, d);\n  }, A.useContext = function(a) {\n    return k.current.useContext(a);\n  }, A.useDebugValue = function() {\n  }, A.useDeferredValue = function(a) {\n    return k.current.useDeferredValue(a);\n  }, A.useEffect = function(a, d) {\n    return k.current.useEffect(a, d);\n  }, A.useId = function() {\n    return k.current.useId();\n  }, A.useImperativeHandle = function(a, d, D) {\n    return k.current.useImperativeHandle(a, d, D);\n  }, A.useInsertionEffect = function(a, d) {\n    return k.current.useInsertionEffect(a, d);\n  }, A.useLayoutEffect = function(a, d) {\n    return k.current.useLayoutEffect(a, d);\n  }, A.useMemo = function(a, d) {\n    return k.current.useMemo(a, d);\n  }, A.useReducer = function(a, d, D) {\n    return k.current.useReducer(a, d, D);\n  }, A.useRef = function(a) {\n    return k.current.useRef(a);\n  }, A.useState = function(a) {\n    return k.current.useState(a);\n  }, A.useSyncExternalStore = function(a, d, D) {\n    return k.current.useSyncExternalStore(a, d, D);\n  }, A.useTransition = function() {\n    return k.current.useTransition();\n  }, A.version = \"18.3.1\", A;\n}\nvar Qe = { exports: {} };\n/**\n * @license React\n * react.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nQe.exports;\nvar gt;\nfunction Gt() {\n  return gt || (gt = 1, function(s, c) {\n     true && function() {\n      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < \"u\" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == \"function\" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n      var i = \"18.3.1\", f = Symbol.for(\"react.element\"), R = Symbol.for(\"react.portal\"), j = Symbol.for(\"react.fragment\"), b = Symbol.for(\"react.strict_mode\"), x = Symbol.for(\"react.profiler\"), h = Symbol.for(\"react.provider\"), y = Symbol.for(\"react.context\"), m = Symbol.for(\"react.forward_ref\"), E = Symbol.for(\"react.suspense\"), N = Symbol.for(\"react.suspense_list\"), L = Symbol.for(\"react.memo\"), B = Symbol.for(\"react.lazy\"), S = Symbol.for(\"react.offscreen\"), P = Symbol.iterator, O = \"@@iterator\";\n      function g(e) {\n        if (e === null || typeof e != \"object\")\n          return null;\n        var r = P && e[P] || e[O];\n        return typeof r == \"function\" ? r : null;\n      }\n      var X = {\n        /**\n         * @internal\n         * @type {ReactComponent}\n         */\n        current: null\n      }, K = {\n        transition: null\n      }, J = {\n        current: null,\n        // Used to reproduce behavior of `batchedUpdates` in legacy mode.\n        isBatchingLegacy: !1,\n        didScheduleLegacyUpdate: !1\n      }, ne = {\n        /**\n         * @internal\n         * @type {ReactComponent}\n         */\n        current: null\n      }, fe = {}, ve = null;\n      function ge(e) {\n        ve = e;\n      }\n      fe.setExtraStackFrame = function(e) {\n        ve = e;\n      }, fe.getCurrentStack = null, fe.getStackAddendum = function() {\n        var e = \"\";\n        ve && (e += ve);\n        var r = fe.getCurrentStack;\n        return r && (e += r() || \"\"), e;\n      };\n      var Ce = !1, Be = !1, Se = !1, ce = !1, de = !1, se = {\n        ReactCurrentDispatcher: X,\n        ReactCurrentBatchConfig: K,\n        ReactCurrentOwner: ne\n      };\n      se.ReactDebugCurrentFrame = fe, se.ReactCurrentActQueue = J;\n      function he(e) {\n        {\n          for (var r = arguments.length, o = new Array(r > 1 ? r - 1 : 0), l = 1; l < r; l++)\n            o[l - 1] = arguments[l];\n          ye(\"warn\", e, o);\n        }\n      }\n      function k(e) {\n        {\n          for (var r = arguments.length, o = new Array(r > 1 ? r - 1 : 0), l = 1; l < r; l++)\n            o[l - 1] = arguments[l];\n          ye(\"error\", e, o);\n        }\n      }\n      function ye(e, r, o) {\n        {\n          var l = se.ReactDebugCurrentFrame, v = l.getStackAddendum();\n          v !== \"\" && (r += \"%s\", o = o.concat([v]));\n          var w = o.map(function(_) {\n            return String(_);\n          });\n          w.unshift(\"Warning: \" + r), Function.prototype.apply.call(console[e], console, w);\n        }\n      }\n      var Oe = {};\n      function be(e, r) {\n        {\n          var o = e.constructor, l = o && (o.displayName || o.name) || \"ReactClass\", v = l + \".\" + r;\n          if (Oe[v])\n            return;\n          k(\"Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.\", r, l), Oe[v] = !0;\n        }\n      }\n      var a = {\n        /**\n         * Checks whether or not this composite component is mounted.\n         * @param {ReactClass} publicInstance The instance we want to test.\n         * @return {boolean} True if mounted, false otherwise.\n         * @protected\n         * @final\n         */\n        isMounted: function(e) {\n          return !1;\n        },\n        /**\n         * Forces an update. This should only be invoked when it is known with\n         * certainty that we are **not** in a DOM transaction.\n         *\n         * You may want to call this when you know that some deeper aspect of the\n         * component's state has changed but `setState` was not called.\n         *\n         * This will not invoke `shouldComponentUpdate`, but it will invoke\n         * `componentWillUpdate` and `componentDidUpdate`.\n         *\n         * @param {ReactClass} publicInstance The instance that should rerender.\n         * @param {?function} callback Called after component is updated.\n         * @param {?string} callerName name of the calling function in the public API.\n         * @internal\n         */\n        enqueueForceUpdate: function(e, r, o) {\n          be(e, \"forceUpdate\");\n        },\n        /**\n         * Replaces all of the state. Always use this or `setState` to mutate state.\n         * You should treat `this.state` as immutable.\n         *\n         * There is no guarantee that `this.state` will be immediately updated, so\n         * accessing `this.state` after calling this method may return the old value.\n         *\n         * @param {ReactClass} publicInstance The instance that should rerender.\n         * @param {object} completeState Next state.\n         * @param {?function} callback Called after component is updated.\n         * @param {?string} callerName name of the calling function in the public API.\n         * @internal\n         */\n        enqueueReplaceState: function(e, r, o, l) {\n          be(e, \"replaceState\");\n        },\n        /**\n         * Sets a subset of the state. This only exists because _pendingState is\n         * internal. This provides a merging strategy that is not available to deep\n         * properties which is confusing. TODO: Expose pendingState or don't use it\n         * during the merge.\n         *\n         * @param {ReactClass} publicInstance The instance that should rerender.\n         * @param {object} partialState Next partial state to be merged with state.\n         * @param {?function} callback Called after component is updated.\n         * @param {?string} Name of the calling function in the public API.\n         * @internal\n         */\n        enqueueSetState: function(e, r, o, l) {\n          be(e, \"setState\");\n        }\n      }, d = Object.assign, D = {};\n      Object.freeze(D);\n      function I(e, r, o) {\n        this.props = e, this.context = r, this.refs = D, this.updater = o || a;\n      }\n      I.prototype.isReactComponent = {}, I.prototype.setState = function(e, r) {\n        if (typeof e != \"object\" && typeof e != \"function\" && e != null)\n          throw new Error(\"setState(...): takes an object of state variables to update or a function which returns an object of state variables.\");\n        this.updater.enqueueSetState(this, e, r, \"setState\");\n      }, I.prototype.forceUpdate = function(e) {\n        this.updater.enqueueForceUpdate(this, e, \"forceUpdate\");\n      };\n      {\n        var W = {\n          isMounted: [\"isMounted\", \"Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks.\"],\n          replaceState: [\"replaceState\", \"Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236).\"]\n        }, G = function(e, r) {\n          Object.defineProperty(I.prototype, e, {\n            get: function() {\n              he(\"%s(...) is deprecated in plain JavaScript React classes. %s\", r[0], r[1]);\n            }\n          });\n        };\n        for (var H in W)\n          W.hasOwnProperty(H) && G(H, W[H]);\n      }\n      function z() {\n      }\n      z.prototype = I.prototype;\n      function Y(e, r, o) {\n        this.props = e, this.context = r, this.refs = D, this.updater = o || a;\n      }\n      var ae = Y.prototype = new z();\n      ae.constructor = Y, d(ae, I.prototype), ae.isPureReactComponent = !0;\n      function xr() {\n        var e = {\n          current: null\n        };\n        return Object.seal(e), e;\n      }\n      var Ze = Array.isArray;\n      function Ie(e) {\n        return Ze(e);\n      }\n      function _r(e) {\n        {\n          var r = typeof Symbol == \"function\" && Symbol.toStringTag, o = r && e[Symbol.toStringTag] || e.constructor.name || \"Object\";\n          return o;\n        }\n      }\n      function Me(e) {\n        try {\n          return je(e), !1;\n        } catch {\n          return !0;\n        }\n      }\n      function je(e) {\n        return \"\" + e;\n      }\n      function Te(e) {\n        if (Me(e))\n          return k(\"The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.\", _r(e)), je(e);\n      }\n      function er(e, r, o) {\n        var l = e.displayName;\n        if (l)\n          return l;\n        var v = r.displayName || r.name || \"\";\n        return v !== \"\" ? o + \"(\" + v + \")\" : o;\n      }\n      function Pe(e) {\n        return e.displayName || \"Context\";\n      }\n      function me(e) {\n        if (e == null)\n          return null;\n        if (typeof e.tag == \"number\" && k(\"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"), typeof e == \"function\")\n          return e.displayName || e.name || null;\n        if (typeof e == \"string\")\n          return e;\n        switch (e) {\n          case j:\n            return \"Fragment\";\n          case R:\n            return \"Portal\";\n          case x:\n            return \"Profiler\";\n          case b:\n            return \"StrictMode\";\n          case E:\n            return \"Suspense\";\n          case N:\n            return \"SuspenseList\";\n        }\n        if (typeof e == \"object\")\n          switch (e.$$typeof) {\n            case y:\n              var r = e;\n              return Pe(r) + \".Consumer\";\n            case h:\n              var o = e;\n              return Pe(o._context) + \".Provider\";\n            case m:\n              return er(e, e.render, \"ForwardRef\");\n            case L:\n              var l = e.displayName || null;\n              return l !== null ? l : me(e.type) || \"Memo\";\n            case B: {\n              var v = e, w = v._payload, _ = v._init;\n              try {\n                return me(_(w));\n              } catch {\n                return null;\n              }\n            }\n          }\n        return null;\n      }\n      var Ne = Object.prototype.hasOwnProperty, Le = {\n        key: !0,\n        ref: !0,\n        __self: !0,\n        __source: !0\n      }, rr, tr, We;\n      We = {};\n      function ze(e) {\n        if (Ne.call(e, \"ref\")) {\n          var r = Object.getOwnPropertyDescriptor(e, \"ref\").get;\n          if (r && r.isReactWarning)\n            return !1;\n        }\n        return e.ref !== void 0;\n      }\n      function Re(e) {\n        if (Ne.call(e, \"key\")) {\n          var r = Object.getOwnPropertyDescriptor(e, \"key\").get;\n          if (r && r.isReactWarning)\n            return !1;\n        }\n        return e.key !== void 0;\n      }\n      function jr(e, r) {\n        var o = function() {\n          rr || (rr = !0, k(\"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", r));\n        };\n        o.isReactWarning = !0, Object.defineProperty(e, \"key\", {\n          get: o,\n          configurable: !0\n        });\n      }\n      function nr(e, r) {\n        var o = function() {\n          tr || (tr = !0, k(\"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", r));\n        };\n        o.isReactWarning = !0, Object.defineProperty(e, \"ref\", {\n          get: o,\n          configurable: !0\n        });\n      }\n      function ar(e) {\n        if (typeof e.ref == \"string\" && ne.current && e.__self && ne.current.stateNode !== e.__self) {\n          var r = me(ne.current.type);\n          We[r] || (k('Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', r, e.ref), We[r] = !0);\n        }\n      }\n      var $e = function(e, r, o, l, v, w, _) {\n        var T = {\n          // This tag allows us to uniquely identify this as a React Element\n          $$typeof: f,\n          // Built-in properties that belong on the element\n          type: e,\n          key: r,\n          ref: o,\n          props: _,\n          // Record the component responsible for creating this element.\n          _owner: w\n        };\n        return T._store = {}, Object.defineProperty(T._store, \"validated\", {\n          configurable: !1,\n          enumerable: !1,\n          writable: !0,\n          value: !1\n        }), Object.defineProperty(T, \"_self\", {\n          configurable: !1,\n          enumerable: !1,\n          writable: !1,\n          value: l\n        }), Object.defineProperty(T, \"_source\", {\n          configurable: !1,\n          enumerable: !1,\n          writable: !1,\n          value: v\n        }), Object.freeze && (Object.freeze(T.props), Object.freeze(T)), T;\n      };\n      function Rr(e, r, o) {\n        var l, v = {}, w = null, _ = null, T = null, M = null;\n        if (r != null) {\n          ze(r) && (_ = r.ref, ar(r)), Re(r) && (Te(r.key), w = \"\" + r.key), T = r.__self === void 0 ? null : r.__self, M = r.__source === void 0 ? null : r.__source;\n          for (l in r)\n            Ne.call(r, l) && !Le.hasOwnProperty(l) && (v[l] = r[l]);\n        }\n        var q = arguments.length - 2;\n        if (q === 1)\n          v.children = o;\n        else if (q > 1) {\n          for (var Q = Array(q), Z = 0; Z < q; Z++)\n            Q[Z] = arguments[Z + 2];\n          Object.freeze && Object.freeze(Q), v.children = Q;\n        }\n        if (e && e.defaultProps) {\n          var re = e.defaultProps;\n          for (l in re)\n            v[l] === void 0 && (v[l] = re[l]);\n        }\n        if (w || _) {\n          var oe = typeof e == \"function\" ? e.displayName || e.name || \"Unknown\" : e;\n          w && jr(v, oe), _ && nr(v, oe);\n        }\n        return $e(e, w, _, T, M, ne.current, v);\n      }\n      function Er(e, r) {\n        var o = $e(e.type, r, e.ref, e._self, e._source, e._owner, e.props);\n        return o;\n      }\n      function kr(e, r, o) {\n        if (e == null)\n          throw new Error(\"React.cloneElement(...): The argument must be a React element, but you passed \" + e + \".\");\n        var l, v = d({}, e.props), w = e.key, _ = e.ref, T = e._self, M = e._source, q = e._owner;\n        if (r != null) {\n          ze(r) && (_ = r.ref, q = ne.current), Re(r) && (Te(r.key), w = \"\" + r.key);\n          var Q;\n          e.type && e.type.defaultProps && (Q = e.type.defaultProps);\n          for (l in r)\n            Ne.call(r, l) && !Le.hasOwnProperty(l) && (r[l] === void 0 && Q !== void 0 ? v[l] = Q[l] : v[l] = r[l]);\n        }\n        var Z = arguments.length - 2;\n        if (Z === 1)\n          v.children = o;\n        else if (Z > 1) {\n          for (var re = Array(Z), oe = 0; oe < Z; oe++)\n            re[oe] = arguments[oe + 2];\n          v.children = re;\n        }\n        return $e(e.type, w, _, T, M, q, v);\n      }\n      function Ee(e) {\n        return typeof e == \"object\" && e !== null && e.$$typeof === f;\n      }\n      var or = \".\", wr = \":\";\n      function Cr(e) {\n        var r = /[=:]/g, o = {\n          \"=\": \"=0\",\n          \":\": \"=2\"\n        }, l = e.replace(r, function(v) {\n          return o[v];\n        });\n        return \"$\" + l;\n      }\n      var Ve = !1, sr = /\\/+/g;\n      function xe(e) {\n        return e.replace(sr, \"$&/\");\n      }\n      function Ae(e, r) {\n        return typeof e == \"object\" && e !== null && e.key != null ? (Te(e.key), Cr(\"\" + e.key)) : r.toString(36);\n      }\n      function ke(e, r, o, l, v) {\n        var w = typeof e;\n        (w === \"undefined\" || w === \"boolean\") && (e = null);\n        var _ = !1;\n        if (e === null)\n          _ = !0;\n        else\n          switch (w) {\n            case \"string\":\n            case \"number\":\n              _ = !0;\n              break;\n            case \"object\":\n              switch (e.$$typeof) {\n                case f:\n                case R:\n                  _ = !0;\n              }\n          }\n        if (_) {\n          var T = e, M = v(T), q = l === \"\" ? or + Ae(T, 0) : l;\n          if (Ie(M)) {\n            var Q = \"\";\n            q != null && (Q = xe(q) + \"/\"), ke(M, r, Q, \"\", function(Ht) {\n              return Ht;\n            });\n          } else M != null && (Ee(M) && (M.key && (!T || T.key !== M.key) && Te(M.key), M = Er(\n            M,\n            // Keep both the (mapped) and old keys if they differ, just as\n            // traverseAllChildren used to do for objects as children\n            o + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key\n            (M.key && (!T || T.key !== M.key) ? (\n              // $FlowFixMe Flow incorrectly thinks existing element's key can be a number\n              // eslint-disable-next-line react-internal/safe-string-coercion\n              xe(\"\" + M.key) + \"/\"\n            ) : \"\") + q\n          )), r.push(M));\n          return 1;\n        }\n        var Z, re, oe = 0, le = l === \"\" ? or : l + wr;\n        if (Ie(e))\n          for (var gr = 0; gr < e.length; gr++)\n            Z = e[gr], re = le + Ae(Z, gr), oe += ke(Z, r, o, re, v);\n        else {\n          var Yr = g(e);\n          if (typeof Yr == \"function\") {\n            var vt = e;\n            Yr === vt.entries && (Ve || he(\"Using Maps as children is not supported. Use an array of keyed ReactElements instead.\"), Ve = !0);\n            for (var Bt = Yr.call(vt), ht, zt = 0; !(ht = Bt.next()).done; )\n              Z = ht.value, re = le + Ae(Z, zt++), oe += ke(Z, r, o, re, v);\n          } else if (w === \"object\") {\n            var yt = String(e);\n            throw new Error(\"Objects are not valid as a React child (found: \" + (yt === \"[object Object]\" ? \"object with keys {\" + Object.keys(e).join(\", \") + \"}\" : yt) + \"). If you meant to render a collection of children, use an array instead.\");\n          }\n        }\n        return oe;\n      }\n      function De(e, r, o) {\n        if (e == null)\n          return e;\n        var l = [], v = 0;\n        return ke(e, l, \"\", \"\", function(w) {\n          return r.call(o, w, v++);\n        }), l;\n      }\n      function Sr(e) {\n        var r = 0;\n        return De(e, function() {\n          r++;\n        }), r;\n      }\n      function ir(e, r, o) {\n        De(e, function() {\n          r.apply(this, arguments);\n        }, o);\n      }\n      function Or(e) {\n        return De(e, function(r) {\n          return r;\n        }) || [];\n      }\n      function lr(e) {\n        if (!Ee(e))\n          throw new Error(\"React.Children.only expected to receive a single React element child.\");\n        return e;\n      }\n      function cr(e) {\n        var r = {\n          $$typeof: y,\n          // As a workaround to support multiple concurrent renderers, we categorize\n          // some renderers as primary and others as secondary. We only expect\n          // there to be two concurrent renderers at most: React Native (primary) and\n          // Fabric (secondary); React DOM (primary) and React ART (secondary).\n          // Secondary renderers store their context values on separate fields.\n          _currentValue: e,\n          _currentValue2: e,\n          // Used to track how many concurrent renderers this context currently\n          // supports within in a single renderer. Such as parallel server rendering.\n          _threadCount: 0,\n          // These are circular\n          Provider: null,\n          Consumer: null,\n          // Add these to use same hidden class in VM as ServerContext\n          _defaultValue: null,\n          _globalName: null\n        };\n        r.Provider = {\n          $$typeof: h,\n          _context: r\n        };\n        var o = !1, l = !1, v = !1;\n        {\n          var w = {\n            $$typeof: y,\n            _context: r\n          };\n          Object.defineProperties(w, {\n            Provider: {\n              get: function() {\n                return l || (l = !0, k(\"Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?\")), r.Provider;\n              },\n              set: function(_) {\n                r.Provider = _;\n              }\n            },\n            _currentValue: {\n              get: function() {\n                return r._currentValue;\n              },\n              set: function(_) {\n                r._currentValue = _;\n              }\n            },\n            _currentValue2: {\n              get: function() {\n                return r._currentValue2;\n              },\n              set: function(_) {\n                r._currentValue2 = _;\n              }\n            },\n            _threadCount: {\n              get: function() {\n                return r._threadCount;\n              },\n              set: function(_) {\n                r._threadCount = _;\n              }\n            },\n            Consumer: {\n              get: function() {\n                return o || (o = !0, k(\"Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?\")), r.Consumer;\n              }\n            },\n            displayName: {\n              get: function() {\n                return r.displayName;\n              },\n              set: function(_) {\n                v || (he(\"Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.\", _), v = !0);\n              }\n            }\n          }), r.Consumer = w;\n        }\n        return r._currentRenderer = null, r._currentRenderer2 = null, r;\n      }\n      var Fe = -1, He = 0, qe = 1, ur = 2;\n      function Tr(e) {\n        if (e._status === Fe) {\n          var r = e._result, o = r();\n          if (o.then(function(w) {\n            if (e._status === He || e._status === Fe) {\n              var _ = e;\n              _._status = qe, _._result = w;\n            }\n          }, function(w) {\n            if (e._status === He || e._status === Fe) {\n              var _ = e;\n              _._status = ur, _._result = w;\n            }\n          }), e._status === Fe) {\n            var l = e;\n            l._status = He, l._result = o;\n          }\n        }\n        if (e._status === qe) {\n          var v = e._result;\n          return v === void 0 && k(`lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?`, v), \"default\" in v || k(`lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))`, v), v.default;\n        } else\n          throw e._result;\n      }\n      function Pr(e) {\n        var r = {\n          // We use these fields to store the result.\n          _status: Fe,\n          _result: e\n        }, o = {\n          $$typeof: B,\n          _payload: r,\n          _init: Tr\n        };\n        {\n          var l, v;\n          Object.defineProperties(o, {\n            defaultProps: {\n              configurable: !0,\n              get: function() {\n                return l;\n              },\n              set: function(w) {\n                k(\"React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.\"), l = w, Object.defineProperty(o, \"defaultProps\", {\n                  enumerable: !0\n                });\n              }\n            },\n            propTypes: {\n              configurable: !0,\n              get: function() {\n                return v;\n              },\n              set: function(w) {\n                k(\"React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.\"), v = w, Object.defineProperty(o, \"propTypes\", {\n                  enumerable: !0\n                });\n              }\n            }\n          });\n        }\n        return o;\n      }\n      function Nr(e) {\n        e != null && e.$$typeof === L ? k(\"forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).\") : typeof e != \"function\" ? k(\"forwardRef requires a render function but was given %s.\", e === null ? \"null\" : typeof e) : e.length !== 0 && e.length !== 2 && k(\"forwardRef render functions accept exactly two parameters: props and ref. %s\", e.length === 1 ? \"Did you forget to use the ref parameter?\" : \"Any additional parameter will be undefined.\"), e != null && (e.defaultProps != null || e.propTypes != null) && k(\"forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?\");\n        var r = {\n          $$typeof: m,\n          render: e\n        };\n        {\n          var o;\n          Object.defineProperty(r, \"displayName\", {\n            enumerable: !1,\n            configurable: !0,\n            get: function() {\n              return o;\n            },\n            set: function(l) {\n              o = l, !e.name && !e.displayName && (e.displayName = l);\n            }\n          });\n        }\n        return r;\n      }\n      var fr;\n      fr = Symbol.for(\"react.module.reference\");\n      function t(e) {\n        return !!(typeof e == \"string\" || typeof e == \"function\" || e === j || e === x || de || e === b || e === E || e === N || ce || e === S || Ce || Be || Se || typeof e == \"object\" && e !== null && (e.$$typeof === B || e.$$typeof === L || e.$$typeof === h || e.$$typeof === y || e.$$typeof === m || // This needs to include all possible module reference object\n        // types supported by any Flight configuration anywhere since\n        // we don't know which Flight build this will end up being used\n        // with.\n        e.$$typeof === fr || e.getModuleId !== void 0));\n      }\n      function u(e, r) {\n        t(e) || k(\"memo: The first argument must be a component. Instead received: %s\", e === null ? \"null\" : typeof e);\n        var o = {\n          $$typeof: L,\n          type: e,\n          compare: r === void 0 ? null : r\n        };\n        {\n          var l;\n          Object.defineProperty(o, \"displayName\", {\n            enumerable: !1,\n            configurable: !0,\n            get: function() {\n              return l;\n            },\n            set: function(v) {\n              l = v, !e.name && !e.displayName && (e.displayName = v);\n            }\n          });\n        }\n        return o;\n      }\n      function p() {\n        var e = X.current;\n        return e === null && k(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`), e;\n      }\n      function C(e) {\n        var r = p();\n        if (e._context !== void 0) {\n          var o = e._context;\n          o.Consumer === e ? k(\"Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?\") : o.Provider === e && k(\"Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?\");\n        }\n        return r.useContext(e);\n      }\n      function V(e) {\n        var r = p();\n        return r.useState(e);\n      }\n      function U(e, r, o) {\n        var l = p();\n        return l.useReducer(e, r, o);\n      }\n      function F(e) {\n        var r = p();\n        return r.useRef(e);\n      }\n      function $(e, r) {\n        var o = p();\n        return o.useEffect(e, r);\n      }\n      function ie(e, r) {\n        var o = p();\n        return o.useInsertionEffect(e, r);\n      }\n      function ee(e, r) {\n        var o = p();\n        return o.useLayoutEffect(e, r);\n      }\n      function te(e, r) {\n        var o = p();\n        return o.useCallback(e, r);\n      }\n      function pe(e, r) {\n        var o = p();\n        return o.useMemo(e, r);\n      }\n      function we(e, r, o) {\n        var l = p();\n        return l.useImperativeHandle(e, r, o);\n      }\n      function _e(e, r) {\n        {\n          var o = p();\n          return o.useDebugValue(e, r);\n        }\n      }\n      function ue() {\n        var e = p();\n        return e.useTransition();\n      }\n      function Ke(e) {\n        var r = p();\n        return r.useDeferredValue(e);\n      }\n      function $r() {\n        var e = p();\n        return e.useId();\n      }\n      function Ar(e, r, o) {\n        var l = p();\n        return l.useSyncExternalStore(e, r, o);\n      }\n      var Ge = 0, qr, Kr, Gr, Xr, Jr, Qr, Zr;\n      function et() {\n      }\n      et.__reactDisabledLog = !0;\n      function wt() {\n        {\n          if (Ge === 0) {\n            qr = console.log, Kr = console.info, Gr = console.warn, Xr = console.error, Jr = console.group, Qr = console.groupCollapsed, Zr = console.groupEnd;\n            var e = {\n              configurable: !0,\n              enumerable: !0,\n              value: et,\n              writable: !0\n            };\n            Object.defineProperties(console, {\n              info: e,\n              log: e,\n              warn: e,\n              error: e,\n              group: e,\n              groupCollapsed: e,\n              groupEnd: e\n            });\n          }\n          Ge++;\n        }\n      }\n      function Ct() {\n        {\n          if (Ge--, Ge === 0) {\n            var e = {\n              configurable: !0,\n              enumerable: !0,\n              writable: !0\n            };\n            Object.defineProperties(console, {\n              log: d({}, e, {\n                value: qr\n              }),\n              info: d({}, e, {\n                value: Kr\n              }),\n              warn: d({}, e, {\n                value: Gr\n              }),\n              error: d({}, e, {\n                value: Xr\n              }),\n              group: d({}, e, {\n                value: Jr\n              }),\n              groupCollapsed: d({}, e, {\n                value: Qr\n              }),\n              groupEnd: d({}, e, {\n                value: Zr\n              })\n            });\n          }\n          Ge < 0 && k(\"disabledDepth fell below zero. This is a bug in React. Please file an issue.\");\n        }\n      }\n      var Dr = se.ReactCurrentDispatcher, Fr;\n      function dr(e, r, o) {\n        {\n          if (Fr === void 0)\n            try {\n              throw Error();\n            } catch (v) {\n              var l = v.stack.trim().match(/\\n( *(at )?)/);\n              Fr = l && l[1] || \"\";\n            }\n          return `\n` + Fr + e;\n        }\n      }\n      var Ir = !1, pr;\n      {\n        var St = typeof WeakMap == \"function\" ? WeakMap : Map;\n        pr = new St();\n      }\n      function rt(e, r) {\n        if (!e || Ir)\n          return \"\";\n        {\n          var o = pr.get(e);\n          if (o !== void 0)\n            return o;\n        }\n        var l;\n        Ir = !0;\n        var v = Error.prepareStackTrace;\n        Error.prepareStackTrace = void 0;\n        var w;\n        w = Dr.current, Dr.current = null, wt();\n        try {\n          if (r) {\n            var _ = function() {\n              throw Error();\n            };\n            if (Object.defineProperty(_.prototype, \"props\", {\n              set: function() {\n                throw Error();\n              }\n            }), typeof Reflect == \"object\" && Reflect.construct) {\n              try {\n                Reflect.construct(_, []);\n              } catch (le) {\n                l = le;\n              }\n              Reflect.construct(e, [], _);\n            } else {\n              try {\n                _.call();\n              } catch (le) {\n                l = le;\n              }\n              e.call(_.prototype);\n            }\n          } else {\n            try {\n              throw Error();\n            } catch (le) {\n              l = le;\n            }\n            e();\n          }\n        } catch (le) {\n          if (le && l && typeof le.stack == \"string\") {\n            for (var T = le.stack.split(`\n`), M = l.stack.split(`\n`), q = T.length - 1, Q = M.length - 1; q >= 1 && Q >= 0 && T[q] !== M[Q]; )\n              Q--;\n            for (; q >= 1 && Q >= 0; q--, Q--)\n              if (T[q] !== M[Q]) {\n                if (q !== 1 || Q !== 1)\n                  do\n                    if (q--, Q--, Q < 0 || T[q] !== M[Q]) {\n                      var Z = `\n` + T[q].replace(\" at new \", \" at \");\n                      return e.displayName && Z.includes(\"<anonymous>\") && (Z = Z.replace(\"<anonymous>\", e.displayName)), typeof e == \"function\" && pr.set(e, Z), Z;\n                    }\n                  while (q >= 1 && Q >= 0);\n                break;\n              }\n          }\n        } finally {\n          Ir = !1, Dr.current = w, Ct(), Error.prepareStackTrace = v;\n        }\n        var re = e ? e.displayName || e.name : \"\", oe = re ? dr(re) : \"\";\n        return typeof e == \"function\" && pr.set(e, oe), oe;\n      }\n      function Ot(e, r, o) {\n        return rt(e, !1);\n      }\n      function Tt(e) {\n        var r = e.prototype;\n        return !!(r && r.isReactComponent);\n      }\n      function vr(e, r, o) {\n        if (e == null)\n          return \"\";\n        if (typeof e == \"function\")\n          return rt(e, Tt(e));\n        if (typeof e == \"string\")\n          return dr(e);\n        switch (e) {\n          case E:\n            return dr(\"Suspense\");\n          case N:\n            return dr(\"SuspenseList\");\n        }\n        if (typeof e == \"object\")\n          switch (e.$$typeof) {\n            case m:\n              return Ot(e.render);\n            case L:\n              return vr(e.type, r, o);\n            case B: {\n              var l = e, v = l._payload, w = l._init;\n              try {\n                return vr(w(v), r, o);\n              } catch {\n              }\n            }\n          }\n        return \"\";\n      }\n      var tt = {}, nt = se.ReactDebugCurrentFrame;\n      function hr(e) {\n        if (e) {\n          var r = e._owner, o = vr(e.type, e._source, r ? r.type : null);\n          nt.setExtraStackFrame(o);\n        } else\n          nt.setExtraStackFrame(null);\n      }\n      function Pt(e, r, o, l, v) {\n        {\n          var w = Function.call.bind(Ne);\n          for (var _ in e)\n            if (w(e, _)) {\n              var T = void 0;\n              try {\n                if (typeof e[_] != \"function\") {\n                  var M = Error((l || \"React class\") + \": \" + o + \" type `\" + _ + \"` is invalid; it must be a function, usually from the `prop-types` package, but received `\" + typeof e[_] + \"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                  throw M.name = \"Invariant Violation\", M;\n                }\n                T = e[_](r, _, l, o, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n              } catch (q) {\n                T = q;\n              }\n              T && !(T instanceof Error) && (hr(v), k(\"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).\", l || \"React class\", o, _, typeof T), hr(null)), T instanceof Error && !(T.message in tt) && (tt[T.message] = !0, hr(v), k(\"Failed %s type: %s\", o, T.message), hr(null));\n            }\n        }\n      }\n      function Ye(e) {\n        if (e) {\n          var r = e._owner, o = vr(e.type, e._source, r ? r.type : null);\n          ge(o);\n        } else\n          ge(null);\n      }\n      var Mr;\n      Mr = !1;\n      function at() {\n        if (ne.current) {\n          var e = me(ne.current.type);\n          if (e)\n            return `\n\nCheck the render method of \\`` + e + \"`.\";\n        }\n        return \"\";\n      }\n      function Nt(e) {\n        if (e !== void 0) {\n          var r = e.fileName.replace(/^.*[\\\\\\/]/, \"\"), o = e.lineNumber;\n          return `\n\nCheck your code at ` + r + \":\" + o + \".\";\n        }\n        return \"\";\n      }\n      function $t(e) {\n        return e != null ? Nt(e.__source) : \"\";\n      }\n      var ot = {};\n      function At(e) {\n        var r = at();\n        if (!r) {\n          var o = typeof e == \"string\" ? e : e.displayName || e.name;\n          o && (r = `\n\nCheck the top-level render call using <` + o + \">.\");\n        }\n        return r;\n      }\n      function st(e, r) {\n        if (!(!e._store || e._store.validated || e.key != null)) {\n          e._store.validated = !0;\n          var o = At(r);\n          if (!ot[o]) {\n            ot[o] = !0;\n            var l = \"\";\n            e && e._owner && e._owner !== ne.current && (l = \" It was passed a child from \" + me(e._owner.type) + \".\"), Ye(e), k('Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', o, l), Ye(null);\n          }\n        }\n      }\n      function it(e, r) {\n        if (typeof e == \"object\") {\n          if (Ie(e))\n            for (var o = 0; o < e.length; o++) {\n              var l = e[o];\n              Ee(l) && st(l, r);\n            }\n          else if (Ee(e))\n            e._store && (e._store.validated = !0);\n          else if (e) {\n            var v = g(e);\n            if (typeof v == \"function\" && v !== e.entries)\n              for (var w = v.call(e), _; !(_ = w.next()).done; )\n                Ee(_.value) && st(_.value, r);\n          }\n        }\n      }\n      function lt(e) {\n        {\n          var r = e.type;\n          if (r == null || typeof r == \"string\")\n            return;\n          var o;\n          if (typeof r == \"function\")\n            o = r.propTypes;\n          else if (typeof r == \"object\" && (r.$$typeof === m || // Note: Memo only checks outer props here.\n          // Inner props are checked in the reconciler.\n          r.$$typeof === L))\n            o = r.propTypes;\n          else\n            return;\n          if (o) {\n            var l = me(r);\n            Pt(o, e.props, \"prop\", l, e);\n          } else if (r.PropTypes !== void 0 && !Mr) {\n            Mr = !0;\n            var v = me(r);\n            k(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", v || \"Unknown\");\n          }\n          typeof r.getDefaultProps == \"function\" && !r.getDefaultProps.isReactClassApproved && k(\"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.\");\n        }\n      }\n      function Dt(e) {\n        {\n          for (var r = Object.keys(e.props), o = 0; o < r.length; o++) {\n            var l = r[o];\n            if (l !== \"children\" && l !== \"key\") {\n              Ye(e), k(\"Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.\", l), Ye(null);\n              break;\n            }\n          }\n          e.ref !== null && (Ye(e), k(\"Invalid attribute `ref` supplied to `React.Fragment`.\"), Ye(null));\n        }\n      }\n      function ct(e, r, o) {\n        var l = t(e);\n        if (!l) {\n          var v = \"\";\n          (e === void 0 || typeof e == \"object\" && e !== null && Object.keys(e).length === 0) && (v += \" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\");\n          var w = $t(r);\n          w ? v += w : v += at();\n          var _;\n          e === null ? _ = \"null\" : Ie(e) ? _ = \"array\" : e !== void 0 && e.$$typeof === f ? (_ = \"<\" + (me(e.type) || \"Unknown\") + \" />\", v = \" Did you accidentally export a JSX literal instead of a component?\") : _ = typeof e, k(\"React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s\", _, v);\n        }\n        var T = Rr.apply(this, arguments);\n        if (T == null)\n          return T;\n        if (l)\n          for (var M = 2; M < arguments.length; M++)\n            it(arguments[M], e);\n        return e === j ? Dt(T) : lt(T), T;\n      }\n      var ut = !1;\n      function Ft(e) {\n        var r = ct.bind(null, e);\n        return r.type = e, ut || (ut = !0, he(\"React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.\")), Object.defineProperty(r, \"type\", {\n          enumerable: !1,\n          get: function() {\n            return he(\"Factory.type is deprecated. Access the class directly before passing it to createFactory.\"), Object.defineProperty(this, \"type\", {\n              value: e\n            }), e;\n          }\n        }), r;\n      }\n      function It(e, r, o) {\n        for (var l = kr.apply(this, arguments), v = 2; v < arguments.length; v++)\n          it(arguments[v], l.type);\n        return lt(l), l;\n      }\n      function Mt(e, r) {\n        var o = K.transition;\n        K.transition = {};\n        var l = K.transition;\n        K.transition._updatedFibers = /* @__PURE__ */ new Set();\n        try {\n          e();\n        } finally {\n          if (K.transition = o, o === null && l._updatedFibers) {\n            var v = l._updatedFibers.size;\n            v > 10 && he(\"Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.\"), l._updatedFibers.clear();\n          }\n        }\n      }\n      var ft = !1, yr = null;\n      function Lt(e) {\n        if (yr === null)\n          try {\n            var r = (\"require\" + Math.random()).slice(0, 7), o = s && s[r];\n            yr = o.call(s, \"timers\").setImmediate;\n          } catch {\n            yr = function(v) {\n              ft === !1 && (ft = !0, typeof MessageChannel > \"u\" && k(\"This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.\"));\n              var w = new MessageChannel();\n              w.port1.onmessage = v, w.port2.postMessage(void 0);\n            };\n          }\n        return yr(e);\n      }\n      var Ue = 0, dt = !1;\n      function pt(e) {\n        {\n          var r = Ue;\n          Ue++, J.current === null && (J.current = []);\n          var o = J.isBatchingLegacy, l;\n          try {\n            if (J.isBatchingLegacy = !0, l = e(), !o && J.didScheduleLegacyUpdate) {\n              var v = J.current;\n              v !== null && (J.didScheduleLegacyUpdate = !1, Vr(v));\n            }\n          } catch (re) {\n            throw mr(r), re;\n          } finally {\n            J.isBatchingLegacy = o;\n          }\n          if (l !== null && typeof l == \"object\" && typeof l.then == \"function\") {\n            var w = l, _ = !1, T = {\n              then: function(re, oe) {\n                _ = !0, w.then(function(le) {\n                  mr(r), Ue === 0 ? Lr(le, re, oe) : re(le);\n                }, function(le) {\n                  mr(r), oe(le);\n                });\n              }\n            };\n            return !dt && typeof Promise < \"u\" && Promise.resolve().then(function() {\n            }).then(function() {\n              _ || (dt = !0, k(\"You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);\"));\n            }), T;\n          } else {\n            var M = l;\n            if (mr(r), Ue === 0) {\n              var q = J.current;\n              q !== null && (Vr(q), J.current = null);\n              var Q = {\n                then: function(re, oe) {\n                  J.current === null ? (J.current = [], Lr(M, re, oe)) : re(M);\n                }\n              };\n              return Q;\n            } else {\n              var Z = {\n                then: function(re, oe) {\n                  re(M);\n                }\n              };\n              return Z;\n            }\n          }\n        }\n      }\n      function mr(e) {\n        e !== Ue - 1 && k(\"You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. \"), Ue = e;\n      }\n      function Lr(e, r, o) {\n        {\n          var l = J.current;\n          if (l !== null)\n            try {\n              Vr(l), Lt(function() {\n                l.length === 0 ? (J.current = null, r(e)) : Lr(e, r, o);\n              });\n            } catch (v) {\n              o(v);\n            }\n          else\n            r(e);\n        }\n      }\n      var Wr = !1;\n      function Vr(e) {\n        if (!Wr) {\n          Wr = !0;\n          var r = 0;\n          try {\n            for (; r < e.length; r++) {\n              var o = e[r];\n              do\n                o = o(!0);\n              while (o !== null);\n            }\n            e.length = 0;\n          } catch (l) {\n            throw e = e.slice(r + 1), l;\n          } finally {\n            Wr = !1;\n          }\n        }\n      }\n      var Wt = ct, Vt = It, Yt = Ft, Ut = {\n        map: De,\n        forEach: ir,\n        count: Sr,\n        toArray: Or,\n        only: lr\n      };\n      c.Children = Ut, c.Component = I, c.Fragment = j, c.Profiler = x, c.PureComponent = Y, c.StrictMode = b, c.Suspense = E, c.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = se, c.act = pt, c.cloneElement = Vt, c.createContext = cr, c.createElement = Wt, c.createFactory = Yt, c.createRef = xr, c.forwardRef = Nr, c.isValidElement = Ee, c.lazy = Pr, c.memo = u, c.startTransition = Mt, c.unstable_act = pt, c.useCallback = te, c.useContext = C, c.useDebugValue = _e, c.useDeferredValue = Ke, c.useEffect = $, c.useId = $r, c.useImperativeHandle = we, c.useInsertionEffect = ie, c.useLayoutEffect = ee, c.useMemo = pe, c.useReducer = U, c.useRef = F, c.useState = V, c.useSyncExternalStore = Ar, c.useTransition = ue, c.version = i, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < \"u\" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == \"function\" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n    }();\n  }(Qe, Qe.exports)), Qe.exports;\n}\nvar bt;\nfunction Hr() {\n  return bt || (bt = 1,  false ? 0 : br.exports = Gt()), br.exports;\n}\n/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar xt;\nfunction Xt() {\n  if (xt) return Xe;\n  xt = 1;\n  var s = Hr(), c = Symbol.for(\"react.element\"), i = Symbol.for(\"react.fragment\"), f = Object.prototype.hasOwnProperty, R = s.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, j = { key: !0, ref: !0, __self: !0, __source: !0 };\n  function b(x, h, y) {\n    var m, E = {}, N = null, L = null;\n    y !== void 0 && (N = \"\" + y), h.key !== void 0 && (N = \"\" + h.key), h.ref !== void 0 && (L = h.ref);\n    for (m in h) f.call(h, m) && !j.hasOwnProperty(m) && (E[m] = h[m]);\n    if (x && x.defaultProps) for (m in h = x.defaultProps, h) E[m] === void 0 && (E[m] = h[m]);\n    return { $$typeof: c, type: x, key: N, ref: L, props: E, _owner: R.current };\n  }\n  return Xe.Fragment = i, Xe.jsx = b, Xe.jsxs = b, Xe;\n}\nvar Je = {};\n/**\n * @license React\n * react-jsx-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar _t;\nfunction Jt() {\n  return _t || (_t = 1,  true && function() {\n    var s = Hr(), c = Symbol.for(\"react.element\"), i = Symbol.for(\"react.portal\"), f = Symbol.for(\"react.fragment\"), R = Symbol.for(\"react.strict_mode\"), j = Symbol.for(\"react.profiler\"), b = Symbol.for(\"react.provider\"), x = Symbol.for(\"react.context\"), h = Symbol.for(\"react.forward_ref\"), y = Symbol.for(\"react.suspense\"), m = Symbol.for(\"react.suspense_list\"), E = Symbol.for(\"react.memo\"), N = Symbol.for(\"react.lazy\"), L = Symbol.for(\"react.offscreen\"), B = Symbol.iterator, S = \"@@iterator\";\n    function P(t) {\n      if (t === null || typeof t != \"object\")\n        return null;\n      var u = B && t[B] || t[S];\n      return typeof u == \"function\" ? u : null;\n    }\n    var O = s.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n    function g(t) {\n      {\n        for (var u = arguments.length, p = new Array(u > 1 ? u - 1 : 0), C = 1; C < u; C++)\n          p[C - 1] = arguments[C];\n        X(\"error\", t, p);\n      }\n    }\n    function X(t, u, p) {\n      {\n        var C = O.ReactDebugCurrentFrame, V = C.getStackAddendum();\n        V !== \"\" && (u += \"%s\", p = p.concat([V]));\n        var U = p.map(function(F) {\n          return String(F);\n        });\n        U.unshift(\"Warning: \" + u), Function.prototype.apply.call(console[t], console, U);\n      }\n    }\n    var K = !1, J = !1, ne = !1, fe = !1, ve = !1, ge;\n    ge = Symbol.for(\"react.module.reference\");\n    function Ce(t) {\n      return !!(typeof t == \"string\" || typeof t == \"function\" || t === f || t === j || ve || t === R || t === y || t === m || fe || t === L || K || J || ne || typeof t == \"object\" && t !== null && (t.$$typeof === N || t.$$typeof === E || t.$$typeof === b || t.$$typeof === x || t.$$typeof === h || // This needs to include all possible module reference object\n      // types supported by any Flight configuration anywhere since\n      // we don't know which Flight build this will end up being used\n      // with.\n      t.$$typeof === ge || t.getModuleId !== void 0));\n    }\n    function Be(t, u, p) {\n      var C = t.displayName;\n      if (C)\n        return C;\n      var V = u.displayName || u.name || \"\";\n      return V !== \"\" ? p + \"(\" + V + \")\" : p;\n    }\n    function Se(t) {\n      return t.displayName || \"Context\";\n    }\n    function ce(t) {\n      if (t == null)\n        return null;\n      if (typeof t.tag == \"number\" && g(\"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"), typeof t == \"function\")\n        return t.displayName || t.name || null;\n      if (typeof t == \"string\")\n        return t;\n      switch (t) {\n        case f:\n          return \"Fragment\";\n        case i:\n          return \"Portal\";\n        case j:\n          return \"Profiler\";\n        case R:\n          return \"StrictMode\";\n        case y:\n          return \"Suspense\";\n        case m:\n          return \"SuspenseList\";\n      }\n      if (typeof t == \"object\")\n        switch (t.$$typeof) {\n          case x:\n            var u = t;\n            return Se(u) + \".Consumer\";\n          case b:\n            var p = t;\n            return Se(p._context) + \".Provider\";\n          case h:\n            return Be(t, t.render, \"ForwardRef\");\n          case E:\n            var C = t.displayName || null;\n            return C !== null ? C : ce(t.type) || \"Memo\";\n          case N: {\n            var V = t, U = V._payload, F = V._init;\n            try {\n              return ce(F(U));\n            } catch {\n              return null;\n            }\n          }\n        }\n      return null;\n    }\n    var de = Object.assign, se = 0, he, k, ye, Oe, be, a, d;\n    function D() {\n    }\n    D.__reactDisabledLog = !0;\n    function I() {\n      {\n        if (se === 0) {\n          he = console.log, k = console.info, ye = console.warn, Oe = console.error, be = console.group, a = console.groupCollapsed, d = console.groupEnd;\n          var t = {\n            configurable: !0,\n            enumerable: !0,\n            value: D,\n            writable: !0\n          };\n          Object.defineProperties(console, {\n            info: t,\n            log: t,\n            warn: t,\n            error: t,\n            group: t,\n            groupCollapsed: t,\n            groupEnd: t\n          });\n        }\n        se++;\n      }\n    }\n    function W() {\n      {\n        if (se--, se === 0) {\n          var t = {\n            configurable: !0,\n            enumerable: !0,\n            writable: !0\n          };\n          Object.defineProperties(console, {\n            log: de({}, t, {\n              value: he\n            }),\n            info: de({}, t, {\n              value: k\n            }),\n            warn: de({}, t, {\n              value: ye\n            }),\n            error: de({}, t, {\n              value: Oe\n            }),\n            group: de({}, t, {\n              value: be\n            }),\n            groupCollapsed: de({}, t, {\n              value: a\n            }),\n            groupEnd: de({}, t, {\n              value: d\n            })\n          });\n        }\n        se < 0 && g(\"disabledDepth fell below zero. This is a bug in React. Please file an issue.\");\n      }\n    }\n    var G = O.ReactCurrentDispatcher, H;\n    function z(t, u, p) {\n      {\n        if (H === void 0)\n          try {\n            throw Error();\n          } catch (V) {\n            var C = V.stack.trim().match(/\\n( *(at )?)/);\n            H = C && C[1] || \"\";\n          }\n        return `\n` + H + t;\n      }\n    }\n    var Y = !1, ae;\n    {\n      var xr = typeof WeakMap == \"function\" ? WeakMap : Map;\n      ae = new xr();\n    }\n    function Ze(t, u) {\n      if (!t || Y)\n        return \"\";\n      {\n        var p = ae.get(t);\n        if (p !== void 0)\n          return p;\n      }\n      var C;\n      Y = !0;\n      var V = Error.prepareStackTrace;\n      Error.prepareStackTrace = void 0;\n      var U;\n      U = G.current, G.current = null, I();\n      try {\n        if (u) {\n          var F = function() {\n            throw Error();\n          };\n          if (Object.defineProperty(F.prototype, \"props\", {\n            set: function() {\n              throw Error();\n            }\n          }), typeof Reflect == \"object\" && Reflect.construct) {\n            try {\n              Reflect.construct(F, []);\n            } catch (ue) {\n              C = ue;\n            }\n            Reflect.construct(t, [], F);\n          } else {\n            try {\n              F.call();\n            } catch (ue) {\n              C = ue;\n            }\n            t.call(F.prototype);\n          }\n        } else {\n          try {\n            throw Error();\n          } catch (ue) {\n            C = ue;\n          }\n          t();\n        }\n      } catch (ue) {\n        if (ue && C && typeof ue.stack == \"string\") {\n          for (var $ = ue.stack.split(`\n`), ie = C.stack.split(`\n`), ee = $.length - 1, te = ie.length - 1; ee >= 1 && te >= 0 && $[ee] !== ie[te]; )\n            te--;\n          for (; ee >= 1 && te >= 0; ee--, te--)\n            if ($[ee] !== ie[te]) {\n              if (ee !== 1 || te !== 1)\n                do\n                  if (ee--, te--, te < 0 || $[ee] !== ie[te]) {\n                    var pe = `\n` + $[ee].replace(\" at new \", \" at \");\n                    return t.displayName && pe.includes(\"<anonymous>\") && (pe = pe.replace(\"<anonymous>\", t.displayName)), typeof t == \"function\" && ae.set(t, pe), pe;\n                  }\n                while (ee >= 1 && te >= 0);\n              break;\n            }\n        }\n      } finally {\n        Y = !1, G.current = U, W(), Error.prepareStackTrace = V;\n      }\n      var we = t ? t.displayName || t.name : \"\", _e = we ? z(we) : \"\";\n      return typeof t == \"function\" && ae.set(t, _e), _e;\n    }\n    function Ie(t, u, p) {\n      return Ze(t, !1);\n    }\n    function _r(t) {\n      var u = t.prototype;\n      return !!(u && u.isReactComponent);\n    }\n    function Me(t, u, p) {\n      if (t == null)\n        return \"\";\n      if (typeof t == \"function\")\n        return Ze(t, _r(t));\n      if (typeof t == \"string\")\n        return z(t);\n      switch (t) {\n        case y:\n          return z(\"Suspense\");\n        case m:\n          return z(\"SuspenseList\");\n      }\n      if (typeof t == \"object\")\n        switch (t.$$typeof) {\n          case h:\n            return Ie(t.render);\n          case E:\n            return Me(t.type, u, p);\n          case N: {\n            var C = t, V = C._payload, U = C._init;\n            try {\n              return Me(U(V), u, p);\n            } catch {\n            }\n          }\n        }\n      return \"\";\n    }\n    var je = Object.prototype.hasOwnProperty, Te = {}, er = O.ReactDebugCurrentFrame;\n    function Pe(t) {\n      if (t) {\n        var u = t._owner, p = Me(t.type, t._source, u ? u.type : null);\n        er.setExtraStackFrame(p);\n      } else\n        er.setExtraStackFrame(null);\n    }\n    function me(t, u, p, C, V) {\n      {\n        var U = Function.call.bind(je);\n        for (var F in t)\n          if (U(t, F)) {\n            var $ = void 0;\n            try {\n              if (typeof t[F] != \"function\") {\n                var ie = Error((C || \"React class\") + \": \" + p + \" type `\" + F + \"` is invalid; it must be a function, usually from the `prop-types` package, but received `\" + typeof t[F] + \"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                throw ie.name = \"Invariant Violation\", ie;\n              }\n              $ = t[F](u, F, C, p, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n            } catch (ee) {\n              $ = ee;\n            }\n            $ && !($ instanceof Error) && (Pe(V), g(\"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).\", C || \"React class\", p, F, typeof $), Pe(null)), $ instanceof Error && !($.message in Te) && (Te[$.message] = !0, Pe(V), g(\"Failed %s type: %s\", p, $.message), Pe(null));\n          }\n      }\n    }\n    var Ne = Array.isArray;\n    function Le(t) {\n      return Ne(t);\n    }\n    function rr(t) {\n      {\n        var u = typeof Symbol == \"function\" && Symbol.toStringTag, p = u && t[Symbol.toStringTag] || t.constructor.name || \"Object\";\n        return p;\n      }\n    }\n    function tr(t) {\n      try {\n        return We(t), !1;\n      } catch {\n        return !0;\n      }\n    }\n    function We(t) {\n      return \"\" + t;\n    }\n    function ze(t) {\n      if (tr(t))\n        return g(\"The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.\", rr(t)), We(t);\n    }\n    var Re = O.ReactCurrentOwner, jr = {\n      key: !0,\n      ref: !0,\n      __self: !0,\n      __source: !0\n    }, nr, ar, $e;\n    $e = {};\n    function Rr(t) {\n      if (je.call(t, \"ref\")) {\n        var u = Object.getOwnPropertyDescriptor(t, \"ref\").get;\n        if (u && u.isReactWarning)\n          return !1;\n      }\n      return t.ref !== void 0;\n    }\n    function Er(t) {\n      if (je.call(t, \"key\")) {\n        var u = Object.getOwnPropertyDescriptor(t, \"key\").get;\n        if (u && u.isReactWarning)\n          return !1;\n      }\n      return t.key !== void 0;\n    }\n    function kr(t, u) {\n      if (typeof t.ref == \"string\" && Re.current && u && Re.current.stateNode !== u) {\n        var p = ce(Re.current.type);\n        $e[p] || (g('Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', ce(Re.current.type), t.ref), $e[p] = !0);\n      }\n    }\n    function Ee(t, u) {\n      {\n        var p = function() {\n          nr || (nr = !0, g(\"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", u));\n        };\n        p.isReactWarning = !0, Object.defineProperty(t, \"key\", {\n          get: p,\n          configurable: !0\n        });\n      }\n    }\n    function or(t, u) {\n      {\n        var p = function() {\n          ar || (ar = !0, g(\"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", u));\n        };\n        p.isReactWarning = !0, Object.defineProperty(t, \"ref\", {\n          get: p,\n          configurable: !0\n        });\n      }\n    }\n    var wr = function(t, u, p, C, V, U, F) {\n      var $ = {\n        // This tag allows us to uniquely identify this as a React Element\n        $$typeof: c,\n        // Built-in properties that belong on the element\n        type: t,\n        key: u,\n        ref: p,\n        props: F,\n        // Record the component responsible for creating this element.\n        _owner: U\n      };\n      return $._store = {}, Object.defineProperty($._store, \"validated\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: !1\n      }), Object.defineProperty($, \"_self\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !1,\n        value: C\n      }), Object.defineProperty($, \"_source\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !1,\n        value: V\n      }), Object.freeze && (Object.freeze($.props), Object.freeze($)), $;\n    };\n    function Cr(t, u, p, C, V) {\n      {\n        var U, F = {}, $ = null, ie = null;\n        p !== void 0 && (ze(p), $ = \"\" + p), Er(u) && (ze(u.key), $ = \"\" + u.key), Rr(u) && (ie = u.ref, kr(u, V));\n        for (U in u)\n          je.call(u, U) && !jr.hasOwnProperty(U) && (F[U] = u[U]);\n        if (t && t.defaultProps) {\n          var ee = t.defaultProps;\n          for (U in ee)\n            F[U] === void 0 && (F[U] = ee[U]);\n        }\n        if ($ || ie) {\n          var te = typeof t == \"function\" ? t.displayName || t.name || \"Unknown\" : t;\n          $ && Ee(F, te), ie && or(F, te);\n        }\n        return wr(t, $, ie, V, C, Re.current, F);\n      }\n    }\n    var Ve = O.ReactCurrentOwner, sr = O.ReactDebugCurrentFrame;\n    function xe(t) {\n      if (t) {\n        var u = t._owner, p = Me(t.type, t._source, u ? u.type : null);\n        sr.setExtraStackFrame(p);\n      } else\n        sr.setExtraStackFrame(null);\n    }\n    var Ae;\n    Ae = !1;\n    function ke(t) {\n      return typeof t == \"object\" && t !== null && t.$$typeof === c;\n    }\n    function De() {\n      {\n        if (Ve.current) {\n          var t = ce(Ve.current.type);\n          if (t)\n            return `\n\nCheck the render method of \\`` + t + \"`.\";\n        }\n        return \"\";\n      }\n    }\n    function Sr(t) {\n      return \"\";\n    }\n    var ir = {};\n    function Or(t) {\n      {\n        var u = De();\n        if (!u) {\n          var p = typeof t == \"string\" ? t : t.displayName || t.name;\n          p && (u = `\n\nCheck the top-level render call using <` + p + \">.\");\n        }\n        return u;\n      }\n    }\n    function lr(t, u) {\n      {\n        if (!t._store || t._store.validated || t.key != null)\n          return;\n        t._store.validated = !0;\n        var p = Or(u);\n        if (ir[p])\n          return;\n        ir[p] = !0;\n        var C = \"\";\n        t && t._owner && t._owner !== Ve.current && (C = \" It was passed a child from \" + ce(t._owner.type) + \".\"), xe(t), g('Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', p, C), xe(null);\n      }\n    }\n    function cr(t, u) {\n      {\n        if (typeof t != \"object\")\n          return;\n        if (Le(t))\n          for (var p = 0; p < t.length; p++) {\n            var C = t[p];\n            ke(C) && lr(C, u);\n          }\n        else if (ke(t))\n          t._store && (t._store.validated = !0);\n        else if (t) {\n          var V = P(t);\n          if (typeof V == \"function\" && V !== t.entries)\n            for (var U = V.call(t), F; !(F = U.next()).done; )\n              ke(F.value) && lr(F.value, u);\n        }\n      }\n    }\n    function Fe(t) {\n      {\n        var u = t.type;\n        if (u == null || typeof u == \"string\")\n          return;\n        var p;\n        if (typeof u == \"function\")\n          p = u.propTypes;\n        else if (typeof u == \"object\" && (u.$$typeof === h || // Note: Memo only checks outer props here.\n        // Inner props are checked in the reconciler.\n        u.$$typeof === E))\n          p = u.propTypes;\n        else\n          return;\n        if (p) {\n          var C = ce(u);\n          me(p, t.props, \"prop\", C, t);\n        } else if (u.PropTypes !== void 0 && !Ae) {\n          Ae = !0;\n          var V = ce(u);\n          g(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", V || \"Unknown\");\n        }\n        typeof u.getDefaultProps == \"function\" && !u.getDefaultProps.isReactClassApproved && g(\"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.\");\n      }\n    }\n    function He(t) {\n      {\n        for (var u = Object.keys(t.props), p = 0; p < u.length; p++) {\n          var C = u[p];\n          if (C !== \"children\" && C !== \"key\") {\n            xe(t), g(\"Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.\", C), xe(null);\n            break;\n          }\n        }\n        t.ref !== null && (xe(t), g(\"Invalid attribute `ref` supplied to `React.Fragment`.\"), xe(null));\n      }\n    }\n    var qe = {};\n    function ur(t, u, p, C, V, U) {\n      {\n        var F = Ce(t);\n        if (!F) {\n          var $ = \"\";\n          (t === void 0 || typeof t == \"object\" && t !== null && Object.keys(t).length === 0) && ($ += \" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\");\n          var ie = Sr();\n          ie ? $ += ie : $ += De();\n          var ee;\n          t === null ? ee = \"null\" : Le(t) ? ee = \"array\" : t !== void 0 && t.$$typeof === c ? (ee = \"<\" + (ce(t.type) || \"Unknown\") + \" />\", $ = \" Did you accidentally export a JSX literal instead of a component?\") : ee = typeof t, g(\"React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s\", ee, $);\n        }\n        var te = Cr(t, u, p, V, U);\n        if (te == null)\n          return te;\n        if (F) {\n          var pe = u.children;\n          if (pe !== void 0)\n            if (C)\n              if (Le(pe)) {\n                for (var we = 0; we < pe.length; we++)\n                  cr(pe[we], t);\n                Object.freeze && Object.freeze(pe);\n              } else\n                g(\"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\");\n            else\n              cr(pe, t);\n        }\n        if (je.call(u, \"key\")) {\n          var _e = ce(t), ue = Object.keys(u).filter(function(Ar) {\n            return Ar !== \"key\";\n          }), Ke = ue.length > 0 ? \"{key: someKey, \" + ue.join(\": ..., \") + \": ...}\" : \"{key: someKey}\";\n          if (!qe[_e + Ke]) {\n            var $r = ue.length > 0 ? \"{\" + ue.join(\": ..., \") + \": ...}\" : \"{}\";\n            g(`A props object containing a \"key\" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />`, Ke, _e, $r, _e), qe[_e + Ke] = !0;\n          }\n        }\n        return t === f ? He(te) : Fe(te), te;\n      }\n    }\n    function Tr(t, u, p) {\n      return ur(t, u, p, !0);\n    }\n    function Pr(t, u, p) {\n      return ur(t, u, p, !1);\n    }\n    var Nr = Pr, fr = Tr;\n    Je.Fragment = f, Je.jsx = Nr, Je.jsxs = fr;\n  }()), Je;\n}\n false ? 0 : Ur.exports = Jt();\nvar n = Ur.exports;\nconst an = ({\n  title: s,\n  summary: c,\n  value: i,\n  size: f = 350,\n  background: R = \"#fff\",\n  fgColor: j = \"#00bfff\",\n  bgColor: b = \"#ccc\",\n  textColor: x = \"#000\",\n  labelColor: h = \"#000\",\n  label: y = \"\",\n  padding: m = \"2rem\",\n  percentageTextSize: E = 4,\n  titleTextSize: N = 1.8,\n  summaryTextSize: L = 1\n}) => {\n  const S = f / 2 - 30, P = 2 * Math.PI * S, O = `${i / 100 * P} ${P}`, g = f + 60;\n  return /* @__PURE__ */ n.jsxs(\n    \"div\",\n    {\n      className: \"doughnut-chart-wrapper\",\n      style: {\n        \"--background-color\": R,\n        \"--text-color\": x,\n        \"--padding\": m,\n        \"--title-size\": `${N}rem`,\n        \"--summary-size\": `${L}rem`,\n        \"--bg-color\": b,\n        \"--fg-color\": j,\n        \"--label-color\": h,\n        \"--percentage-size\": `${E}rem`,\n        \"--stroke-dasharray\": O\n      },\n      children: [\n        s && /* @__PURE__ */ n.jsx(\"h2\", { className: \"chart-title\", children: s }),\n        /* @__PURE__ */ n.jsxs(\"div\", { className: \"doughnut-container\", children: [\n          /* @__PURE__ */ n.jsxs(\n            \"svg\",\n            {\n              className: \"svg-container\",\n              \"aria-hidden\": \"true\",\n              viewBox: `0 0 ${g} ${g}`,\n              width: f,\n              children: [\n                /* @__PURE__ */ n.jsx(\n                  \"circle\",\n                  {\n                    className: \"circle-background\",\n                    r: S,\n                    cx: g / 2,\n                    cy: g / 2,\n                    strokeWidth: 60\n                  }\n                ),\n                /* @__PURE__ */ n.jsx(\n                  \"circle\",\n                  {\n                    className: \"circle-foreground\",\n                    r: S,\n                    cx: g / 2,\n                    cy: g / 2,\n                    strokeWidth: 60,\n                    strokeDasharray: O\n                  }\n                ),\n                /* @__PURE__ */ n.jsx(\n                  \"text\",\n                  {\n                    className: \"percentage-text\",\n                    x: g / 2,\n                    y: g / 2,\n                    dominantBaseline: \"middle\",\n                    textAnchor: \"middle\",\n                    fill: x,\n                    children: `${i}%`\n                  }\n                ),\n                y && /* @__PURE__ */ n.jsx(\n                  \"text\",\n                  {\n                    className: \"label-text\",\n                    x: g / 2,\n                    y: g / 2 + 30,\n                    dominantBaseline: \"middle\",\n                    textAnchor: \"middle\",\n                    fill: h,\n                    children: y\n                  }\n                )\n              ]\n            }\n          ),\n          c && /* @__PURE__ */ n.jsx(\"p\", { className: \"chart-summary\", children: c })\n        ] })\n      ]\n    }\n  );\n}, on = ({\n  data: s,\n  colors: c = [\"rgba(0, 123, 255, 0.7)\", \"rgba(255, 0, 123, 0.7)\"],\n  height: i = 400,\n  labelColor: f = \"#000\",\n  width: R,\n  // The width is now passed directly as a prop\n  background: j = \"#fff\",\n  foreground: b = \"#000\"\n}) => {\n  const x = s.flatMap((S) => [S.series1, S.series2]), h = Math.min(...x), y = Math.max(...x), m = (S, P, O, g) => (S - P) / (O - P) * g, E = (S, P, O) => S / P * O, N = (S, P) => {\n    const O = E(P, s.length, i), g = m(S.series1, h, y, R), X = m(S.series2, h, y, R);\n    return /* @__PURE__ */ n.jsxs(\"g\", { children: [\n      /* @__PURE__ */ n.jsx(\n        \"line\",\n        {\n          x1: g,\n          y1: O + i / s.length / 2,\n          x2: X,\n          y2: O + i / s.length / 2,\n          stroke: \"var(--foreground-color)\",\n          strokeWidth: \"2\"\n        }\n      ),\n      /* @__PURE__ */ n.jsx(\"circle\", { cx: g, cy: O + i / s.length / 2, r: 6, fill: c[0] }),\n      /* @__PURE__ */ n.jsx(\"circle\", { cx: X, cy: O + i / s.length / 2, r: 6, fill: c[1] })\n    ] }, `dumbbell-${P}`);\n  }, L = s.map((S, P) => /* @__PURE__ */ n.jsx(\n    \"text\",\n    {\n      x: \"-10\",\n      y: E(P, s.length, i) + i / s.length / 2 + 5,\n      textAnchor: \"end\",\n      fontSize: \"12px\",\n      fill: \"var(--label-color)\",\n      children: S.fruit\n    },\n    P\n  )), B = () => {\n    const P = (y - h) / 5, O = [];\n    for (let g = 0; g < 6; g++) {\n      const X = h + g * P, K = m(X, h, y, R);\n      O.push(\n        /* @__PURE__ */ n.jsxs(\"g\", { children: [\n          /* @__PURE__ */ n.jsx(\n            \"line\",\n            {\n              x1: K,\n              y1: i,\n              x2: K,\n              y2: i + 5,\n              stroke: \"var(--foreground-color)\"\n            }\n          ),\n          /* @__PURE__ */ n.jsx(\n            \"text\",\n            {\n              x: K,\n              y: i + 20,\n              textAnchor: \"middle\",\n              fontSize: \"12px\",\n              fill: \"var(--label-color)\",\n              children: X.toFixed(0)\n            }\n          )\n        ] }, `x-tick-${g}`)\n      );\n    }\n    return O;\n  };\n  return /* @__PURE__ */ n.jsx(\n    \"div\",\n    {\n      className: \"dumbbell-chart-wrapper\",\n      style: {\n        \"--background-color\": j,\n        \"--foreground-color\": b,\n        \"--label-color\": f,\n        \"--chart-height\": `${i}px`\n      },\n      children: /* @__PURE__ */ n.jsx(\"div\", { className: \"svg-container\", children: /* @__PURE__ */ n.jsxs(\n        \"svg\",\n        {\n          viewBox: `0 0 ${R} ${i + 50}`,\n          style: { overflow: \"visible\", width: \"100%\", height: \"100%\" },\n          children: [\n            s.map((S, P) => N(S, P)),\n            L,\n            /* @__PURE__ */ n.jsx(\n              \"line\",\n              {\n                x1: \"0\",\n                y1: i,\n                x2: R,\n                y2: i,\n                stroke: \"var(--foreground-color)\",\n                strokeWidth: \"2\"\n              }\n            ),\n            B()\n          ]\n        }\n      ) })\n    }\n  );\n}, sn = ({\n  title: s,\n  summary: c,\n  ariaDescription: i,\n  labelColor: f = \"#000\",\n  background: R = \"#fff\",\n  foreground: j = \"#000\",\n  data: b\n}) => {\n  const x = Math.max(...b.map((h) => h.value));\n  return /* @__PURE__ */ n.jsx(\"div\", { className: \"comparison-graph\", children: /* @__PURE__ */ n.jsxs(\n    \"div\",\n    {\n      className: \"chart-wrapper\",\n      style: {\n        \"--background-color\": R,\n        \"--foreground-color\": j\n      },\n      children: [\n        /* @__PURE__ */ n.jsx(\n          \"div\",\n          {\n            className: \"title-container\",\n            style: { \"--foreground-color\": j },\n            children: /* @__PURE__ */ n.jsx(\"h2\", { className: \"graph-title\", children: s })\n          }\n        ),\n        /* @__PURE__ */ n.jsx(\"div\", { className: \"graph-container\", \"aria-hidden\": \"true\", children: b.map((h, y) => {\n          const m = Math.sqrt(h.value) / Math.sqrt(x) * 10;\n          return /* @__PURE__ */ n.jsx(\n            \"div\",\n            {\n              className: \"circle-wrapper\",\n              style: {\n                width: `${m}rem`,\n                height: `${m}rem`,\n                \"--circle-color\": h.color\n              },\n              children: /* @__PURE__ */ n.jsxs(\n                \"div\",\n                {\n                  className: \"circle-text\",\n                  style: { \"--label-color\": f },\n                  children: [\n                    h.value,\n                    \"B\"\n                  ]\n                }\n              )\n            },\n            y\n          );\n        }) }),\n        c && /* @__PURE__ */ n.jsx(\"p\", { className: \"graph-summary\", style: { \"--foreground-color\": j }, children: c })\n      ]\n    }\n  ) });\n}, ln = ({\n  title: s,\n  background: c,\n  foreground: i,\n  labelColor: f,\n  summary: R,\n  items: j = [],\n  year: b,\n  valueType: x = \"\",\n  colorSeries: h = []\n  // New prop for color series override\n}) => /* @__PURE__ */ n.jsx(\"div\", { className: \"horizontal-bar\", children: /* @__PURE__ */ n.jsxs(\n  \"ol\",\n  {\n    className: \"list-container\",\n    style: {\n      \"--background-color\": c || \"#0c263eff\"\n    },\n    children: [\n      s && /* @__PURE__ */ n.jsx(\"h2\", { className: \"title\", style: { \"--foreground-color\": i || \"#000\" }, children: s }),\n      R && /* @__PURE__ */ n.jsx(\"p\", { className: \"summary\", style: { \"--foreground-color\": i || \"#000\" }, children: R }),\n      b && /* @__PURE__ */ n.jsxs(\"h3\", { className: \"year-text\", style: { \"--foreground-color\": i || \"#fff\" }, children: [\n        \"Year: \",\n        b\n      ] }),\n      j.length > 0 ? j.map((y, m) => {\n        const E = h[m] || y.color || \"#ccc\";\n        return /* @__PURE__ */ n.jsxs(\"li\", { className: \"list-item\", children: [\n          /* @__PURE__ */ n.jsx(\"p\", { className: \"name-text\", style: { \"--foreground-color\": i || \"#fff\" }, children: y.name }),\n          /* @__PURE__ */ n.jsx(\"div\", { className: \"line-container\", children: /* @__PURE__ */ n.jsx(\n            \"div\",\n            {\n              className: \"line\",\n              style: {\n                \"--line-color\": E,\n                \"--line-width\": `${y.value}%`\n              },\n              children: /* @__PURE__ */ n.jsxs(\"span\", { className: \"total-value\", style: { \"--label-color\": f || \"#fff\" }, children: [\n                y.value,\n                x\n              ] })\n            }\n          ) })\n        ] }, m);\n      }) : /* @__PURE__ */ n.jsx(\"p\", { children: \"No data available\" })\n    ]\n  }\n) }), cn = ({\n  title: s,\n  background: c,\n  foreground: i,\n  summary: f,\n  items: R = [],\n  labelColor: j,\n  valueType: b = \"\",\n  valueColor: x,\n  colors: h\n}) => {\n  const y = [\"#ff6347\", \"#4682b4\", \"#32cd32\", \"#dda0dd\"];\n  return /* @__PURE__ */ n.jsx(\"div\", { className: \"horizontal-list\", children: /* @__PURE__ */ n.jsxs(\n    \"ol\",\n    {\n      className: \"list-container\",\n      style: { \"--background-color\": c || \"#0c263eff\" },\n      children: [\n        s && /* @__PURE__ */ n.jsx(\n          \"h2\",\n          {\n            className: \"title\",\n            style: {\n              \"--foreground-color\": i || \"#000\"\n            },\n            children: s\n          }\n        ),\n        f && /* @__PURE__ */ n.jsx(\n          \"p\",\n          {\n            className: \"summary\",\n            style: {\n              \"--foreground-color\": i || \"#000\"\n            },\n            children: f\n          }\n        ),\n        R.map((m, E) => {\n          const N = m.color || y[E % y.length], L = m.valueColor || x || \"#fff\";\n          return /* @__PURE__ */ n.jsxs(\"li\", { className: \"list-item\", children: [\n            /* @__PURE__ */ n.jsx(\n              \"p\",\n              {\n                className: \"name-text\",\n                style: {\n                  \"--label-color\": j || \"#000\"\n                },\n                children: m.name\n              }\n            ),\n            /* @__PURE__ */ n.jsxs(\"div\", { className: \"line-container\", children: [\n              /* @__PURE__ */ n.jsx(\n                \"div\",\n                {\n                  className: \"line\",\n                  style: {\n                    \"--line-color\": N,\n                    \"--line-width\": `${m.value}%`\n                  }\n                }\n              ),\n              /* @__PURE__ */ n.jsxs(\n                \"div\",\n                {\n                  className: \"circle\",\n                  style: {\n                    \"--circle-color\": N,\n                    \"--value-color\": L\n                  },\n                  children: [\n                    m.value,\n                    b\n                  ]\n                }\n              )\n            ] })\n          ] }, E);\n        })\n      ]\n    }\n  ) });\n}, Br = (s, c, i) => i - s / c * i, jt = (s, c, i) => s / (c - 1) * i, Qt = (s, c, i, f = 5, R = \"#000\") => {\n  const j = [];\n  for (let b = 0; b <= f; b++) {\n    const x = i / f * b, h = Br(x, i, c);\n    j.push(\n      /* @__PURE__ */ n.jsx(\n        \"line\",\n        {\n          x1: \"0\",\n          y1: h,\n          x2: s,\n          y2: h,\n          stroke: R,\n          strokeWidth: \"1\"\n        },\n        `grid-line-${b}`\n      )\n    );\n  }\n  return j;\n}, un = ({\n  data: s,\n  colors: c = [\n    \"rgba(0, 123, 255, 0.5)\",\n    \"rgba(0, 255, 123, 0.5)\",\n    \"rgba(255, 123, 0, 0.5)\"\n  ],\n  height: i = 400,\n  width: f,\n  seriesNames: R = [\"Series 1\", \"Series 2\", \"Series 3\"],\n  background: j = \"#fff\",\n  labelColor: b = \"#000\",\n  axisColor: x = \"#000\"\n}) => {\n  if (!s || s.length === 0)\n    return /* @__PURE__ */ n.jsx(\"p\", { children: \"No data available\" });\n  const h = Math.max(\n    ...s.map((S) => S.series1 + S.series2 + S.series3)\n  ), y = (S, P = []) => {\n    let O = \"\";\n    const g = [...P];\n    return s.forEach((X, K) => {\n      const J = jt(K, s.length, f), ne = X[S] + (P[K] || 0), fe = Br(ne, h, i);\n      O += `${K === 0 ? \"M\" : \"L\"} ${J} ${fe} `, g[K] = ne;\n    }), O += `L ${f} ${i} L 0 ${i} Z`, { path: O, accumulatedValues: g };\n  }, m = y(\"series1\"), E = y(\"series2\", m.accumulatedValues), N = y(\"series3\", E.accumulatedValues), L = s.map((S, P) => /* @__PURE__ */ n.jsx(\n    \"text\",\n    {\n      x: jt(P, s.length, f),\n      y: i + 20,\n      textAnchor: \"middle\",\n      fontSize: \"12px\",\n      fill: x,\n      children: S.month\n    },\n    S.month\n  )), B = Array.from({ length: 6 }, (S, P) => {\n    const O = h / 5 * P, g = Br(O, h, i);\n    return /* @__PURE__ */ n.jsx(\n      \"text\",\n      {\n        x: \"-10\",\n        y: g + 5,\n        textAnchor: \"end\",\n        fontSize: \"12px\",\n        fill: x,\n        children: O.toFixed(0)\n      },\n      `y-label-${P}`\n    );\n  });\n  return /* @__PURE__ */ n.jsxs(\"div\", { className: \"stacked-area-chart\", style: { backgroundColor: j }, children: [\n    /* @__PURE__ */ n.jsx(\"div\", { className: \"svg-container\", children: /* @__PURE__ */ n.jsxs(\n      \"svg\",\n      {\n        viewBox: `0 0 ${f} ${i + 30}`,\n        style: { overflow: \"visible\", width: \"100%\", height: \"100%\" },\n        children: [\n          Qt(f, i, h),\n          /* @__PURE__ */ n.jsx(\"path\", { d: N.path, fill: c[2], stroke: \"none\" }),\n          /* @__PURE__ */ n.jsx(\"path\", { d: E.path, fill: c[1], stroke: \"none\" }),\n          /* @__PURE__ */ n.jsx(\"path\", { d: m.path, fill: c[0], stroke: \"none\" }),\n          L,\n          B,\n          /* @__PURE__ */ n.jsx(\n            \"line\",\n            {\n              x1: \"0\",\n              y1: i,\n              x2: f,\n              y2: i,\n              stroke: x,\n              strokeWidth: \"2\"\n            }\n          ),\n          /* @__PURE__ */ n.jsx(\n            \"line\",\n            {\n              x1: \"0\",\n              y1: \"0\",\n              x2: \"0\",\n              y2: i,\n              stroke: x,\n              strokeWidth: \"2\"\n            }\n          )\n        ]\n      }\n    ) }),\n    /* @__PURE__ */ n.jsx(\"div\", { className: \"legend-container\", children: R.map((S, P) => /* @__PURE__ */ n.jsxs(\"div\", { className: \"legend-item\", style: { color: b }, children: [\n      /* @__PURE__ */ n.jsx(\"div\", { className: \"color-box\", style: { backgroundColor: c[P] } }),\n      /* @__PURE__ */ n.jsx(\"span\", { children: S })\n    ] }, P)) })\n  ] });\n}, Et = (s) => {\n  let c = `M ${s[0].x} ${s[0].y}`;\n  for (let i = 1; i < s.length - 1; i++) {\n    const f = (s[i].x + s[i + 1].x) / 2, R = (s[i].y + s[i + 1].y) / 2, j = (f + s[i].x) / 2, b = (f + s[i + 1].x) / 2;\n    c += ` Q ${j} ${s[i].y}, ${f} ${R} Q ${b} ${s[i + 1].y}, ${s[i + 1].x} ${s[i + 1].y}`;\n  }\n  return c;\n}, Zt = (s, c) => {\n  let i = Et(s);\n  const f = s[s.length - 1];\n  return i += ` L ${f.x} ${c} L ${s[0].x} ${c} Z`, i;\n}, fn = ({\n  data: s,\n  labels: c,\n  width: i = 800,\n  height: f = 400,\n  fillColor: R,\n  strokeColor: j,\n  background: b,\n  labelColor: x,\n  lineColor: h\n}) => {\n  const y = Math.max(...s), m = i / (s.length - 1), E = 20, N = s.map((L, B) => ({\n    x: E + B * m,\n    y: f - L / y * f\n  }));\n  return /* @__PURE__ */ n.jsx(\n    \"div\",\n    {\n      className: \"spline-chart-container\",\n      style: { \"--chart-height\": `${f}px`, \"--chart-background\": b || \"#f9f9f9\" },\n      children: /* @__PURE__ */ n.jsxs(\"svg\", { className: \"svg-container\", viewBox: `0 0 ${i} ${f}`, children: [\n        N.map((L, B) => /* @__PURE__ */ n.jsxs(\"g\", { children: [\n          /* @__PURE__ */ n.jsx(\n            \"line\",\n            {\n              x1: L.x,\n              y1: 0,\n              x2: L.x,\n              y2: f,\n              style: { stroke: h || \"#ccc\" },\n              className: \"vertical-line\"\n            }\n          ),\n          /* @__PURE__ */ n.jsx(\"text\", { x: L.x, y: f - 5, textAnchor: \"middle\", style: { fill: x || \"#333\" }, className: \"axis-label\", children: c[B] })\n        ] }, B)),\n        /* @__PURE__ */ n.jsx(\n          \"path\",\n          {\n            d: Zt(N, f),\n            style: { fill: R || \"#4682b4\" },\n            className: \"area-path\"\n          }\n        ),\n        /* @__PURE__ */ n.jsx(\n          \"path\",\n          {\n            d: Et(N),\n            style: { stroke: j || \"#4682b4\" },\n            className: \"spline-path\"\n          }\n        )\n      ] })\n    }\n  );\n};\nvar en = Hr();\nconst kt = /* @__PURE__ */ qt(en), dn = ({\n  riskData: s,\n  likelihoodLabels: c,\n  impactLabels: i,\n  background: f = \"#fff\",\n  foreground: R = \"#000\",\n  labelColor: j,\n  colors: b\n}) => {\n  const x = (y) => {\n    switch (y) {\n      case \"low\":\n        return b[0];\n      case \"medium\":\n        return b[1];\n      case \"high\":\n        return b[2];\n      default:\n        return \"#fff\";\n    }\n  }, h = (y) => {\n    switch (y) {\n      case \"low\":\n        return j[0];\n      case \"medium\":\n        return j[1];\n      case \"high\":\n        return j[2];\n      default:\n        return \"#333\";\n    }\n  };\n  return /* @__PURE__ */ n.jsxs(\"div\", { children: [\n    /* @__PURE__ */ n.jsx(\"h2\", { className: \"title\", style: { color: R }, children: \"Risk Rating Matrix\" }),\n    /* @__PURE__ */ n.jsxs(\"div\", { className: \"matrix-container\", style: { backgroundColor: f }, children: [\n      /* @__PURE__ */ n.jsx(\"div\", { className: \"axis-label\" }),\n      c.map((y, m) => /* @__PURE__ */ n.jsx(\"div\", { className: \"axis-label\", style: { color: R }, children: y }, m)),\n      s.map((y, m) => /* @__PURE__ */ n.jsxs(kt.Fragment, { children: [\n        /* @__PURE__ */ n.jsx(\"div\", { className: \"axis-label\", style: { color: R }, children: i[m] }),\n        y.map((E, N) => /* @__PURE__ */ n.jsx(\n          \"div\",\n          {\n            className: \"matrix-cell\",\n            style: {\n              backgroundColor: x(E),\n              color: h(E)\n            },\n            children: E.charAt(0).toUpperCase() + E.slice(1)\n          },\n          `${m}-${N}`\n        ))\n      ] }, m))\n    ] })\n  ] });\n}, rn = (s) => {\n  const c = Math.min(255, Math.floor(255 * s / 100)), i = Math.min(255, Math.floor(255 * (100 - s) / 100));\n  return `rgb(${c}, 0, ${i})`;\n}, pn = ({\n  data: s,\n  months: c,\n  rowLabels: i,\n  background: f,\n  labelColor: R,\n  valueColor: j\n}) => {\n  const b = i.length, x = c.length;\n  return /* @__PURE__ */ n.jsxs(\"div\", { className: \"heatmap-wrapper\", style: { backgroundColor: f, \"--num-columns\": x, \"--num-rows\": b }, children: [\n    /* @__PURE__ */ n.jsx(\"div\", {}),\n    c.map((h, y) => /* @__PURE__ */ n.jsx(\"div\", { className: \"date-label\", style: { color: R }, children: h }, y)),\n    s.map((h, y) => /* @__PURE__ */ n.jsxs(kt.Fragment, { children: [\n      /* @__PURE__ */ n.jsx(\"div\", { className: \"row-label\", style: { color: R }, children: i[y] }),\n      h.map((m, E) => /* @__PURE__ */ n.jsx(\n        \"div\",\n        {\n          className: \"heatmap-cell\",\n          style: { backgroundColor: rn(m), color: j },\n          children: m\n        },\n        E\n      ))\n    ] }, y))\n  ] });\n}, vn = ({\n  data: s,\n  legend: c,\n  background: i,\n  textColor: f,\n  defaultColors: R,\n  explanation: j,\n  barWidth: b = \"90%\"\n}) => /* @__PURE__ */ n.jsx(\"div\", { className: \"stacked-row-chart\", children: /* @__PURE__ */ n.jsxs(\"div\", { className: \"chart-container\", style: { backgroundColor: i }, children: [\n  /* @__PURE__ */ n.jsxs(\"div\", { className: \"legend-explanation-container\", children: [\n    /* @__PURE__ */ n.jsx(\"div\", { className: \"explanation-text\", style: { color: f }, children: j }),\n    /* @__PURE__ */ n.jsx(\"div\", { className: \"legend-container\", children: c.map((x, h) => /* @__PURE__ */ n.jsxs(\"div\", { className: \"legend-item\", style: { color: f }, children: [\n      /* @__PURE__ */ n.jsx(\"div\", { className: \"color-box\", style: { backgroundColor: x.color } }),\n      x.label\n    ] }, h)) })\n  ] }),\n  s.map((x, h) => /* @__PURE__ */ n.jsxs(\"div\", { className: \"row\", children: [\n    /* @__PURE__ */ n.jsx(\"div\", { className: \"description\", style: { color: f }, children: x.description }),\n    /* @__PURE__ */ n.jsxs(\"div\", { className: \"bar-container\", style: { backgroundColor: i, width: b }, children: [\n      x.segments.map((y, m) => /* @__PURE__ */ n.jsxs(\n        \"div\",\n        {\n          className: \"bar-segment\",\n          style: { flex: y.value, backgroundColor: y.color || R[m], color: y.textColor || \"#fff\" },\n          children: [\n            y.value,\n            \"%\"\n          ]\n        },\n        m\n      )),\n      /* @__PURE__ */ n.jsx(\"div\", { className: \"bar-value\", style: { color: f } })\n    ] })\n  ] }, h))\n] }) }), zr = (s, c, i) => s == null ? 0 : i - s / c * i, Rt = (s, c, i) => s / c * i, tn = (s = \"#000\", c, i, f, R = 5) => {\n  const j = [];\n  for (let b = 0; b <= R; b++) {\n    const x = f / R * b, h = zr(x, f, i);\n    j.push(\n      /* @__PURE__ */ n.jsx(\n        \"line\",\n        {\n          x1: \"0\",\n          y1: h,\n          x2: c,\n          y2: h,\n          stroke: s,\n          strokeWidth: \"1\"\n        },\n        `grid-line-${b}`\n      )\n    );\n  }\n  return j;\n}, hn = ({\n  data: s,\n  colors: c = [\"rgba(0, 123, 255, 0.7)\", \"rgba(0, 255, 123, 0.7)\", \"rgba(255, 123, 0, 0.7)\"],\n  height: i = 400,\n  width: f,\n  // Width is now required and passed from the parent component\n  seriesNames: R = [\"Series 1\", \"Series 2\", \"Series 3\"],\n  background: j,\n  foreground: b,\n  labelColor: x,\n  valueColor: h,\n  axisColor: y\n}) => {\n  if (!s || s.length === 0)\n    return /* @__PURE__ */ n.jsx(\"p\", { children: \"No data available\" });\n  const m = Math.max(\n    ...s.map(\n      (O) => Object.values(O).filter((g) => typeof g == \"number\").reduce((g, X) => g + X, 0)\n    )\n  ), E = f / s.length / 2, N = f / s.length, L = (O, g) => {\n    let X = 0;\n    return Object.keys(O).map((K, J) => {\n      if (K === \"month\") return null;\n      const ne = O[K], fe = Rt(g, s.length, f) + N / 4, ve = i - zr(ne, m, i), ge = i - ve - X;\n      return X += ve, /* @__PURE__ */ n.jsx(\n        \"rect\",\n        {\n          x: fe,\n          y: ge,\n          width: E,\n          height: ve,\n          fill: c[J - 1]\n        },\n        `${K}-${g}`\n      );\n    });\n  }, B = s.map((O, g) => /* @__PURE__ */ n.jsx(\n    \"text\",\n    {\n      x: Rt(g, s.length, f) + N / 2,\n      y: i + 20,\n      textAnchor: \"middle\",\n      fontSize: \"12px\",\n      fill: y,\n      children: O.month\n    },\n    g\n  )), S = 5, P = Array.from({ length: S + 1 }, (O, g) => {\n    const X = m / S * g, K = zr(X, m, i);\n    return /* @__PURE__ */ n.jsx(\n      \"text\",\n      {\n        x: \"-10\",\n        y: K + 5,\n        textAnchor: \"end\",\n        fontSize: \"12px\",\n        fill: y,\n        children: X.toFixed(0)\n      },\n      `y-label-${g}`\n    );\n  });\n  return /* @__PURE__ */ n.jsxs(\"div\", { className: \"stacked-bar-chart\", style: { backgroundColor: j }, children: [\n    /* @__PURE__ */ n.jsx(\"div\", { className: \"svg-container\", children: /* @__PURE__ */ n.jsxs(\n      \"svg\",\n      {\n        viewBox: `0 0 ${f} ${i + 30}`,\n        style: { overflow: \"visible\", width: \"100%\", height: \"100%\" },\n        children: [\n          tn(y || \"#000\", f, i, m, S),\n          s.map((O, g) => /* @__PURE__ */ n.jsx(\"g\", { children: L(O, g) }, `bar-group-${g}`)),\n          B,\n          P,\n          /* @__PURE__ */ n.jsx(\n            \"line\",\n            {\n              x1: \"0\",\n              y1: i,\n              x2: f,\n              y2: i,\n              stroke: y,\n              strokeWidth: \"2\"\n            }\n          ),\n          /* @__PURE__ */ n.jsx(\n            \"line\",\n            {\n              x1: \"0\",\n              y1: \"0\",\n              x2: \"0\",\n              y2: i,\n              stroke: y || \"#000\",\n              strokeWidth: \"2\"\n            }\n          )\n        ]\n      }\n    ) }),\n    /* @__PURE__ */ n.jsx(\"div\", { className: \"legend-container\", children: R.map((O, g) => /* @__PURE__ */ n.jsxs(\"div\", { className: \"legend-item\", style: { color: x }, children: [\n      /* @__PURE__ */ n.jsx(\"div\", { className: \"color-box\", style: { backgroundColor: c[g] } }),\n      /* @__PURE__ */ n.jsx(\"span\", { children: O })\n    ] }, g)) })\n  ] });\n}, yn = ({\n  data: s,\n  title: c,\n  background: i = \"\",\n  foreground: f = \"\",\n  barColor: R = \"\",\n  targetColor: j = \"\"\n}) => /* @__PURE__ */ n.jsxs(\n  \"div\",\n  {\n    className: \"benchmark-container\",\n    style: {\n      \"--background-color\": i,\n      \"--foreground-color\": f\n    },\n    children: [\n      c && /* @__PURE__ */ n.jsx(\"h2\", { className: \"chart-title\", children: c }),\n      s.map((b, x) => /* @__PURE__ */ n.jsxs(\"div\", { className: \"bar-container\", children: [\n        /* @__PURE__ */ n.jsx(\"div\", { className: \"bar-label\", children: b.label }),\n        /* @__PURE__ */ n.jsxs(\"div\", { style: { flexBasis: \"70%\", position: \"relative\" }, children: [\n          /* @__PURE__ */ n.jsx(\n            \"div\",\n            {\n              className: \"benchmark-line\",\n              \"data-label\": `Target: ${b.benchmark}%`,\n              style: {\n                \"--benchmark-color\": j,\n                \"--benchmark-percentage\": `${b.benchmark}%`\n              }\n            }\n          ),\n          /* @__PURE__ */ n.jsx(\n            \"div\",\n            {\n              className: \"bar\",\n              style: {\n                width: `${b.actual}%`,\n                \"--bar-color\": R\n              }\n            }\n          )\n        ] }),\n        /* @__PURE__ */ n.jsxs(\"div\", { style: { flexBasis: \"10%\", textAlign: \"right\" }, children: [\n          b.actual,\n          \"%\"\n        ] })\n      ] }, x))\n    ]\n  }\n), mn = ({\n  title: s,\n  percentage: c,\n  background: i = \"#fff\",\n  foreground: f = \"#000\",\n  description: R = \"\",\n  activeColor: j = \"#4caf50\",\n  nonActiveColor: b = \"#ccc\",\n  size: x = 100\n}) => {\n  const y = Math.floor(c / 100 * 100), m = Array.from({ length: 100 }, (E, N) => /* @__PURE__ */ n.jsx(\n    \"svg\",\n    {\n      className: \"man-icon\",\n      style: {\n        fill: N >= 100 - y ? j : b\n      },\n      xmlns: \"http://www.w3.org/2000/svg\",\n      viewBox: \"0 0 100 210\",\n      width: x,\n      children: /* @__PURE__ */ n.jsx(\"path\", { d: \"M50.28 8.44a19.506 19.97 0 0 0-19.507 19.97 19.506 19.97 0 0 0 11.97 18.406c-10.63.806-19.743 3.327-21.03 7.332L3.596 116.68c-1.376 4.744 1.146 9.597 5.655 10.88l1.903.545c4.508 1.283 9.248-1.509 10.622-6.252l9.194-40.67c-2.654 33.322-2.41 77.242-3.682 112.724-.179 4.935 3.459 9.018 8.144 9.163l1.975.066c4.685.159 8.605-3.713 8.782-8.648l1.943-67.479h3.497l1.943 67.479c.179 4.935 4.086 8.792 8.772 8.648l1.984-.066c4.686-.16 8.311-4.228 8.134-9.163-1.677-32.128-.796-80.335-4.421-110.41l11.147 38.664c1.375 4.743 6.103 7.525 10.612 6.242l1.902-.545c4.51-1.283 7.04-6.126 5.666-10.869l-18.13-62.543c-2.114-4.363-11.125-6.837-21.42-7.63a19.506 19.97 0 0 0 11.97-18.407A19.506 19.97 0 0 0 50.28 8.44Z\" })\n    },\n    N\n  )).reverse();\n  return /* @__PURE__ */ n.jsxs(\"div\", { className: \"waffle-chart-container\", style: { backgroundColor: i }, children: [\n    /* @__PURE__ */ n.jsx(\"h2\", { className: \"waffle-title\", style: { color: f }, children: s }),\n    /* @__PURE__ */ n.jsx(\"p\", { className: \"description\", style: { color: f }, children: R }),\n    /* @__PURE__ */ n.jsxs(\"div\", { className: \"chart-content\", children: [\n      /* @__PURE__ */ n.jsx(\"span\", { role: \"img\", \"aria-label\": `the pictograph of 100 stick people, with ${c} showing as active`, children: /* @__PURE__ */ n.jsx(\"div\", { className: \"waffle-container\", children: m }) }),\n      /* @__PURE__ */ n.jsxs(\"div\", { className: \"percentage-container\", style: { color: j }, children: [\n        c,\n        \"%\"\n      ] })\n    ] })\n  ] });\n}, gn = ({\n  title: s,\n  data: c,\n  fillColor: i = \"#4682b4\",\n  // Default fill color for bars\n  backgroundColor: f = \"#fff\",\n  // Default background color\n  foregroundColor: R = \"#000\",\n  // Default foreground color\n  noTotal: j = !1\n}) => {\n  if (!c || c.length === 0) return /* @__PURE__ */ n.jsx(\"p\", { children: \"No data available\" });\n  const b = c.reduce((E, { value: N }) => E + N, 0), x = 300, h = 50, y = Math.max(...c.map((E) => E.value)), m = x / c.length;\n  return /* @__PURE__ */ n.jsxs(\n    \"div\",\n    {\n      className: \"sparkbar-chart-container\",\n      style: { backgroundColor: f, color: R },\n      children: [\n        !j && /* @__PURE__ */ n.jsxs(n.Fragment, { children: [\n          /* @__PURE__ */ n.jsx(\"div\", { className: \"sparkbar-title\", children: s }),\n          /* @__PURE__ */ n.jsx(\"p\", { className: \"sparkbar-total\", children: b })\n        ] }),\n        /* @__PURE__ */ n.jsx(\"svg\", { className: \"sparkbar-svg\", width: x, height: h, children: c.map((E, N) => /* @__PURE__ */ n.jsx(\n          \"rect\",\n          {\n            className: \"sparkbar-rect\",\n            x: N * m,\n            y: h - E.value / y * h,\n            width: m - 2,\n            height: E.value / y * h,\n            fill: i\n          },\n          N\n        )) })\n      ]\n    }\n  );\n}, bn = ({\n  title: s,\n  total: c,\n  value: i,\n  barColor: f = \"#4682b4\",\n  // Default fill color for the bar\n  background: R = \"#e0e0e0\",\n  // Default background color of the wrapper\n  foreground: j = \"#000\",\n  // Default text color for title and value\n  suffix: b = \"\"\n  // Optional suffix, default is an empty string\n}) => {\n  const x = i / c * 100;\n  return /* @__PURE__ */ n.jsxs(\"div\", { className: \"spark-horizontal-bar-container\", style: { color: j }, children: [\n    /* @__PURE__ */ n.jsxs(\"div\", { className: \"spark-horizontal-bar-info\", children: [\n      /* @__PURE__ */ n.jsx(\"span\", { className: \"spark-horizontal-bar-title\", children: s }),\n      /* @__PURE__ */ n.jsxs(\"span\", { className: \"spark-horizontal-bar-value\", children: [\n        i,\n        b\n      ] })\n    ] }),\n    /* @__PURE__ */ n.jsx(\"div\", { className: \"spark-horizontal-bar-wrapper\", style: { background: R }, children: /* @__PURE__ */ n.jsx(\n      \"div\",\n      {\n        className: \"spark-horizontal-bar-fill\",\n        style: {\n          width: `${x}%`,\n          backgroundColor: f\n        }\n      }\n    ) })\n  ] });\n}, nn = (s) => {\n  if (!s || s.length === 0) return \"\";\n  let c = `M ${s[0].x} ${s[0].y}`;\n  for (let i = 1; i < s.length - 1; i++) {\n    const f = (s[i].x + s[i + 1].x) / 2, R = (s[i].y + s[i + 1].y) / 2, j = (f + s[i].x) / 2, b = (f + s[i + 1].x) / 2;\n    c += ` Q ${j} ${s[i].y}, ${f} ${R} Q ${b} ${s[i + 1].y}, ${s[i + 1].x} ${s[i + 1].y}`;\n  }\n  return c;\n}, xn = ({\n  title: s,\n  data: c,\n  // Data array of objects with item and value\n  strokeColor: i = \"#4682b4\",\n  // Default stroke color\n  strokeWidth: f = 2,\n  // Default stroke width\n  backgroundColor: R = \"#fff\",\n  // Default background color (white)\n  foregroundColor: j = \"#000\"\n  // Default foreground color (black)\n}) => {\n  if (!c || c.length === 0) return /* @__PURE__ */ n.jsx(\"p\", { children: \"No data available\" });\n  const b = c.reduce((B, { value: S }) => B + S, 0), x = 300, h = 50, y = Math.max(...c.map((B) => B.value));\n  if (y === 0) return /* @__PURE__ */ n.jsx(\"p\", { children: \"No valid data\" });\n  const m = x / Math.max(1, c.length - 1), E = f / 2, N = c.map((B, S) => ({\n    x: E + S * m,\n    y: h - B.value / y * h\n  })), L = x + E;\n  return /* @__PURE__ */ n.jsxs(\n    \"div\",\n    {\n      className: \"sparkline-chart-container\",\n      style: { backgroundColor: R, color: j },\n      children: [\n        /* @__PURE__ */ n.jsx(\"div\", { className: \"sparkline-title\", children: s }),\n        /* @__PURE__ */ n.jsx(\"p\", { className: \"sparkline-total\", children: b }),\n        /* @__PURE__ */ n.jsx(\n          \"svg\",\n          {\n            className: \"sparkline-svg\",\n            viewBox: `0 0 ${L} ${h}`,\n            preserveAspectRatio: \"none\",\n            children: /* @__PURE__ */ n.jsx(\n              \"path\",\n              {\n                d: nn(N),\n                className: \"sparkline-path\",\n                style: {\n                  stroke: i,\n                  strokeWidth: f\n                }\n              }\n            )\n          }\n        )\n      ]\n    }\n  );\n}, _n = ({\n  title: s,\n  total: c,\n  segments: i,\n  background: f = \"#e0e0e0\",\n  // Default background color of the wrapper\n  foreground: R = \"#000\",\n  // Default text color for title and value\n  suffix: j = \"\",\n  // Optional suffix, default is an empty string\n  height: b = \"20px\"\n  // Default height for the stacked bar, can be overridden\n}) => /* @__PURE__ */ n.jsxs(\"div\", { className: \"spark-stacked-bar-container\", style: { color: R, background: f }, children: [\n  /* @__PURE__ */ n.jsxs(\"div\", { className: \"spark-stacked-bar-info\", children: [\n    /* @__PURE__ */ n.jsx(\"span\", { className: \"spark-stacked-bar-title\", children: s }),\n    /* @__PURE__ */ n.jsxs(\"span\", { className: \"spark-stacked-bar-value\", children: [\n      i.reduce((x, h) => x + h.value, 0),\n      j\n    ] })\n  ] }),\n  /* @__PURE__ */ n.jsx(\"div\", { className: \"spark-stacked-bar-wrapper\", style: { background: f, height: b }, children: i.map((x, h) => {\n    const y = x.value / c * 100;\n    return /* @__PURE__ */ n.jsx(\n      \"div\",\n      {\n        className: \"spark-stacked-bar-segment\",\n        style: {\n          width: `${y}%`,\n          backgroundColor: x.color,\n          height: \"100%\"\n          // Ensures the segment respects the wrapper's height\n        }\n      },\n      h\n    );\n  }) })\n] });\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/infocharts/dist/index.es.js\n");

/***/ })

};
;